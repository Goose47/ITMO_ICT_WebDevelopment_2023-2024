{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js \u0426\u0435\u043b\u044c: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.jss \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440 \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f vue-router \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438: @/router/routes.js import HomePage from \"../views/HomePage.vue\"; import ProfilePage from \"../views/ProfilePage.vue\"; import SearchPage from \"../views/SearchPage.vue\"; import LoginPage from \"../views/auth/LoginPage.vue\"; import RegisterPage from \"../views/auth/RegisterPage.vue\"; import NotFoundPage from \"../views/NotFoundPage.vue\"; import SecureComponent from \"../components/SecureComponent.vue\"; import PublicComponent from \"../components/PublicComponent.vue\"; export default [ { path: '', meta: { requiresAuth: true }, component: SecureComponent, children: [ { path: '', name: 'home', component: HomePage }, { path: '/profile', name: 'profile', component: ProfilePage }, { path: '/search', name: 'search', component: SearchPage }, ], }, { path: '', meta: { blockedForAuthenticated: true }, component: PublicComponent, children: [ { path: '/login', name: 'login', component: LoginPage, }, { path: '/register', name: 'register', component: RegisterPage, }, ], }, { name: '404', path: '/:catchAll(.*)', component: NotFoundPage } ] @/router/index.js import { createRouter, createWebHistory } from 'vue-router' import routes from './routes.js' import useAuthStore from \"../pinia/auth\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: routes, }) router.beforeEach(async (to, from) => { let user let authStore = useAuthStore() user = await authStore.getUser() if(to.meta.requiresAuth && !user) { return { name: 'login' } } if(to.meta.blockedForAuthenticated && user) { return { name: 'home' } } }) export default router \u041f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u043e\u0443\u0442\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0438\u043b\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f pinia. \u0412\u0441\u0435\u0433\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 store\u2019a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0442\u0440\u0435\u043a\u0430\u043c\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f @/pinia/auth.js import { defineStore } from 'pinia' import router from \"../router\"; import http from \"../services/httpClient\"; const useAuthStore = defineStore('auth', { state: () => ({ user: null, }), getters: { isAuthenticated() { return this.user !== null }, }, actions: { setUser(user) { this.user = user }, register(user) { http.post( 'register', {...user}, ).then(res => { router.push({name: 'login'}) }).catch(e => { // }) }, login(user) { http.post( 'login', {...user} ).then(res => { router.push({name: 'home'}) }).catch(err => { // }) }, logout() { http.post( 'logout', ).then(res => { this.$reset() router.push({name: 'login'}) }) }, async getUser() { if (!this.user) { let user try { user = (await http.get('me')).data } catch (e) { user = null } this.user = user } return this.user }, }, persist: true, }) export default useAuthStore @/pinia/player.js import { defineStore } from 'pinia' const usePlayerStore = defineStore('player', { state: () => ({ currentSong: null, playlist: [], }), getters: { getCurrentSong() { return this.playlist[this.currentSong] }, }, actions: { setCurrentSong(song) { this.playlist = [song] this.currentSong = 0 }, addToPlaylist(song) { this.playlist.push(song) }, setCurrentPlaylist(playlist, play = true) { this.playlist = playlist if (play) { this.currentSong = 0 } }, playNextSong() { if (this.playlist.length > this.currentSong + 1) { this.currentSong += 1 } }, playPreviousSong() { if (this.currentSong > 0) { this.currentSong -= 1 } }, }, persist: true, }) export default usePlayerStore \u0414\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 pinia-plugin-persistedstate. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a api \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f axios: @/services/httpClient.js import axios from \"axios\" class HttpClient { get( url, params ) { return new Promise((resolve, reject) => { axios.get(url, {params: params}).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } post( url, data ) { return new Promise((resolve, reject) => { axios.post(url, data).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } } export default new HttpClient() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 vue.js, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 API, \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"l-4"},{"location":"#vuejs","text":"\u0426\u0435\u043b\u044c: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.jss","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js"},{"location":"#_1","text":"\u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440","title":"\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f vue-router \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438: @/router/routes.js import HomePage from \"../views/HomePage.vue\"; import ProfilePage from \"../views/ProfilePage.vue\"; import SearchPage from \"../views/SearchPage.vue\"; import LoginPage from \"../views/auth/LoginPage.vue\"; import RegisterPage from \"../views/auth/RegisterPage.vue\"; import NotFoundPage from \"../views/NotFoundPage.vue\"; import SecureComponent from \"../components/SecureComponent.vue\"; import PublicComponent from \"../components/PublicComponent.vue\"; export default [ { path: '', meta: { requiresAuth: true }, component: SecureComponent, children: [ { path: '', name: 'home', component: HomePage }, { path: '/profile', name: 'profile', component: ProfilePage }, { path: '/search', name: 'search', component: SearchPage }, ], }, { path: '', meta: { blockedForAuthenticated: true }, component: PublicComponent, children: [ { path: '/login', name: 'login', component: LoginPage, }, { path: '/register', name: 'register', component: RegisterPage, }, ], }, { name: '404', path: '/:catchAll(.*)', component: NotFoundPage } ] @/router/index.js import { createRouter, createWebHistory } from 'vue-router' import routes from './routes.js' import useAuthStore from \"../pinia/auth\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: routes, }) router.beforeEach(async (to, from) => { let user let authStore = useAuthStore() user = await authStore.getUser() if(to.meta.requiresAuth && !user) { return { name: 'login' } } if(to.meta.blockedForAuthenticated && user) { return { name: 'home' } } }) export default router \u041f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u043e\u0443\u0442\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0438\u043b\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f pinia. \u0412\u0441\u0435\u0433\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 store\u2019a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0442\u0440\u0435\u043a\u0430\u043c\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f @/pinia/auth.js import { defineStore } from 'pinia' import router from \"../router\"; import http from \"../services/httpClient\"; const useAuthStore = defineStore('auth', { state: () => ({ user: null, }), getters: { isAuthenticated() { return this.user !== null }, }, actions: { setUser(user) { this.user = user }, register(user) { http.post( 'register', {...user}, ).then(res => { router.push({name: 'login'}) }).catch(e => { // }) }, login(user) { http.post( 'login', {...user} ).then(res => { router.push({name: 'home'}) }).catch(err => { // }) }, logout() { http.post( 'logout', ).then(res => { this.$reset() router.push({name: 'login'}) }) }, async getUser() { if (!this.user) { let user try { user = (await http.get('me')).data } catch (e) { user = null } this.user = user } return this.user }, }, persist: true, }) export default useAuthStore @/pinia/player.js import { defineStore } from 'pinia' const usePlayerStore = defineStore('player', { state: () => ({ currentSong: null, playlist: [], }), getters: { getCurrentSong() { return this.playlist[this.currentSong] }, }, actions: { setCurrentSong(song) { this.playlist = [song] this.currentSong = 0 }, addToPlaylist(song) { this.playlist.push(song) }, setCurrentPlaylist(playlist, play = true) { this.playlist = playlist if (play) { this.currentSong = 0 } }, playNextSong() { if (this.playlist.length > this.currentSong + 1) { this.currentSong += 1 } }, playPreviousSong() { if (this.currentSong > 0) { this.currentSong -= 1 } }, }, persist: true, }) export default usePlayerStore \u0414\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 pinia-plugin-persistedstate. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a api \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f axios: @/services/httpClient.js import axios from \"axios\" class HttpClient { get( url, params ) { return new Promise((resolve, reject) => { axios.get(url, {params: params}).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } post( url, data ) { return new Promise((resolve, reject) => { axios.post(url, data).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } } export default new HttpClient()","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_3","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u044f","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"#_4","text":"\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 vue.js, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 API, \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"l3/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework. \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440 \u041c\u043e\u0434\u0435\u043b\u0438 class User(models.Model): email = models.EmailField(max_length=255, blank=False, null=False, unique=True) password = models.CharField(max_length=255, blank=False, null=False) @property def favorite_playlist(self): return self.playlists.first() # profile # api_tokens # playlists class UserProfile(models.Model): first_name = models.CharField(max_length=255, blank=False, null=False) last_name = models.CharField(max_length=255, blank=False, null=False) patronymic = models.CharField(max_length=255, blank=True, null=True) user = models.OneToOneField('User', on_delete=models.CASCADE, related_name='profile') class ApiToken(models.Model): token = models.CharField(max_length=255, blank=False, null=False, unique=True) user = models.ForeignKey('User', on_delete=models.CASCADE, related_name='api_tokens') ################### class FileType(models.TextChoices): AUDIO = 'audio', 'audio' VIDEO = 'video', 'video' IMAGE = 'image', 'image' class DefaultFilePath(models.TextChoices): FAVORITE_PLAYLIST_COVER = 'storage/default_playlist_cover.jpg', 'storage/default_playlist_cover.jpg' class File(models.Model): file = models.FileField(upload_to='storage/') type = models.CharField( max_length=5, choices=FileType.choices ) @property def filename(self): return str(self.file).split('storage/')[1] # path = models.CharField(max_length=255) # extension = models.CharField(max_length=255) class Artist(models.Model): name = models.CharField(max_length=255) avatar = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') # songs # albums class Song(models.Model): artist = models.ForeignKey(Artist, on_delete=models.RESTRICT, null=True, related_name='songs') audio = models.ForeignKey(File, on_delete=models.RESTRICT, null=False, related_name='+') cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') name = models.CharField(max_length=255) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @property def audio_url(self): return settings.APP_URL + reverse('audio.download', kwargs={'filename': self.audio.filename}) class Playlist(models.Model): name = models.CharField(max_length=255) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') is_public = models.BooleanField(default=False) user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='playlists') songs = models.ManyToManyField(Song) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @staticmethod def create_favorite_playlist_for_user(user): cover = File.objects.filter(file=DefaultFilePath.FAVORITE_PLAYLIST_COVER).get() playlist = Playlist( name='Favorite', cover=cover, is_public=False, user=user ) playlist.save() class Album(models.Model): name = models.CharField(max_length=100) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') artist = models.ForeignKey(Artist, on_delete=models.RESTRICT) songs = models.ManyToManyField(Song) \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0422\u043e\u043a\u0435\u043d\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0424\u0430\u0439\u043b, \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u0430, \u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c, \u041f\u0435\u0441\u043d\u044f, \u041f\u043b\u0435\u0439\u043b\u0438\u0441\u0442, \u0410\u043b\u044c\u0431\u043e\u043c. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py from django.urls import path from musec_app.views import auth from musec_app.views import user from musec_app.views import songs from musec_app.views import files from musec_app.views import playlists urlpatterns = [ # Auth path('register', auth.register, name='auth.register'), path('login', auth.login, name='auth.login'), path('logout', auth.logout, name='auth.logout'), # User path('me', user.me, name='user.me'), # Songs path('songs', songs.index, name='songs.index'), path('songs/<int:song_id>/favorite', songs.toggle_favorite, name='songs.favorite'), path('songs/upload', songs.store, name='songs.store'), # test # Playlists path('playlists', playlists.index, name='playlists.index'), path('playlists/my', playlists.my, name='playlists.my'), # Files path('files/audio/<str:filename>', files.download_audio, name='audio.download'), path('files/image/<str:filename>', files.download_image, name='image.download'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0435\u0441\u043d\u044f\u043c\u0438, \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u0430\u043c\u0438 \u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438. serializers.py \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django serializers \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 http-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f http-\u043e\u0442\u0432\u0435\u0442\u043e\u0432 from rest_framework import serializers from musec_app.models import File, Song class ProfileSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) first_name = serializers.CharField(max_length=255) last_name = serializers.CharField(max_length=255) patronymic = serializers.CharField(max_length=255) class UserSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) first_name = serializers.CharField(max_length=255, write_only=True) last_name = serializers.CharField(max_length=255, write_only=True) patronymic = serializers.CharField(max_length=255, write_only=True, allow_blank=True, allow_null=True) profile = ProfileSerializer(read_only=True) class UserAuthSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) class TokenSerializer(serializers.Serializer): token = serializers.CharField() class ArtistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) # avatar_url = serializers.CharField(max_length=255) class FileSerializer(serializers.ModelSerializer): class Meta: model = File fields = ['id', 'file'] class SongSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) cover_url = serializers.ReadOnlyField() audio_url = serializers.ReadOnlyField() artist = ArtistSerializer(read_only=True) name = serializers.CharField(max_length=255) artist_id = serializers.IntegerField(write_only=True) audio = serializers.FileField(write_only=True) cover = serializers.FileField(write_only=True) class PlaylistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) cover_url = serializers.ReadOnlyField() songs = SongSerializer(read_only=True, many=True) \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f songs.py from django.utils.datastructures import MultiValueDictKeyError from rest_framework.decorators import api_view, authentication_classes, parser_classes from rest_framework.parsers import MultiPartParser from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer, SongSerializer, FileSerializer from musec_app.models import Song, File, FileType @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = {} try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass songs = Song.objects.filter(**filters).all() return api_response.payload(SongSerializer(songs, many=True).data) @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) @parser_classes([MultiPartParser]) def store(request): serializer = SongSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data audio = File( file=data['audio'], type=FileType.AUDIO ) audio.save() cover = File( file=data['cover'], type=FileType.IMAGE ) cover.save() song_data = { 'name': data['name'], 'artist_id': data['artist_id'], 'audio': audio, 'cover': cover, } song = Song(**song_data) song.save() return api_response.success('Song successfully created') @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def toggle_favorite(request, song_id): song = Song.objects.filter(id=song_id).get() if not song: return api_response.not_found('Song was not found.') favorite_playlist = request.user.favorite_playlist if favorite_playlist.songs.filter(id=song_id).all().first(): # already liked favorite_playlist.songs.remove(song) else: favorite_playlist.songs.add(song) return api_response.success() playlists.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import PlaylistSerializer from musec_app.models import Playlist from django.utils.datastructures import MultiValueDictKeyError @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def my(request): playlists = Playlist.objects.filter(user_id=request.user.id, is_public=False).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = { 'user_id': None, 'is_public': True, } try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass playlists = Playlist.objects.filter(**filters).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) files.py from rest_framework.decorators import api_view from musec_app.models import File from musec_app.responses import api_response import os from django.http import HttpResponse from django.conf import settings @api_view(['GET']) def download_audio(_, filename): return get_response('audio/mpeg', filename) @api_view(['GET']) def download_image(_, filename): return get_response('image/png', filename) def get_response(content_type, filename): filename = 'storage/' + filename file = File.objects.filter(file=filename).all().first() if not file: return api_response.not_found() full_path = os.path.join(settings.MEDIA_ROOT, filename) with open(full_path, 'rb') as fh: response = HttpResponse(fh.read(), content_type=content_type) response['Content-Disposition'] = 'inline; filename=' + os.path.basename(full_path) return response user.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def me(request): return api_response.payload(UserSerializer(request.user, context={'profile': True}).data) auth.py import string import random from rest_framework.decorators import api_view, authentication_classes from musec_app.serializers import UserSerializer, UserAuthSerializer, TokenSerializer from musec_app.models import User, ApiToken, UserProfile, Playlist from musec_app.responses import api_response from musec_app.auth.authentication import AppTokenAuthentication from django.contrib.auth.hashers import PBKDF2SHA1PasswordHasher as PasswordHasher @api_view(['POST']) def register(request): serializer = UserSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data if User.objects.filter(email=data['email']).count() > 0: return api_response.error('The user with given email is already registered', 422) hasher = PasswordHasher() user = User.objects.create(email=data['email'], password=hasher.encode(data['password'], hasher.salt())) user.save() profile = UserProfile( first_name=data['first_name'], last_name=data['last_name'], patronymic=data['patronymic'], user=user ) profile.save() Playlist.create_favorite_playlist_for_user(user) return api_response.payload(UserSerializer(user).data) @api_view(['POST']) def login(request): serializer = UserAuthSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) email = serializer.validated_data['email'] password = serializer.validated_data['password'] user = User.objects.filter(email=email).first() if not user: return api_response.not_found('User not found') hasher = PasswordHasher() if not hasher.verify(password, user.password): return api_response.unauthenticated() source = string.ascii_letters + string.digits token = ''.join((random.choice(source) for _ in range(128))) api_token = ApiToken(token=token, user=user) api_token.save() response = api_response.payload(TokenSerializer({'token': token}).data) response.set_cookie( key='api_token', value=token, httponly=True ) return response @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def logout(request): request.auth.delete() return api_response.success('Successfully logged out.') api_response.py from django.http import JsonResponse def success(message='Success'): return JsonResponse( data=format_payload(message), status=200 ) def payload(data): return JsonResponse( data=format_payload(data=data), status=200 ) # Errors def unauthenticated(): return JsonResponse( data=format_payload('Invalid credentials'), status=401 ) def validation_error(errors, message='Validation error'): return JsonResponse( data=format_payload(message, None, errors), status=422 ) def not_found(message='Not found'): return JsonResponse( data=format_payload(message), status=404, ) def error(message='Error', status=400): return JsonResponse( data=format_payload(message), status=status ) # Internal def format_payload(message=None, data=None, errors=None): return { 'message': message, 'data': data if data else [], 'errors': errors if errors else [], } authentication.py from rest_framework.authentication import BaseAuthentication, get_authorization_header from django.core.exceptions import ObjectDoesNotExist from rest_framework import exceptions from musec_app.models import User, ApiToken class AppTokenAuthentication(BaseAuthentication): def authenticate(self, request): try: token = request.COOKIES['api_token'] api_token = ApiToken.objects.filter(token=token).get() except KeyError: raise exceptions.AuthenticationFailed('Unauthenticated') except ObjectDoesNotExist: raise exceptions.AuthenticationFailed('Unauthenticated') return api_token.user, api_token def authenticate_header(self, request): return 'Token' \u041e\u0431\u0437\u043e\u0440 API AUTH POST /register POST /login POST /logout User GET /me Songs GET /songs POST /songs/<id>/favorite POST /songs/upload Files/Audio GET /files/audio/<path> Files/Image GET /files/image/<path> Playlists GET /playlists/my GET /playlists?search=q \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d API \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"l-3"},{"location":"l3/#django","text":"\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"l3/#_1","text":"\u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440","title":"\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"l3/#_2","text":"class User(models.Model): email = models.EmailField(max_length=255, blank=False, null=False, unique=True) password = models.CharField(max_length=255, blank=False, null=False) @property def favorite_playlist(self): return self.playlists.first() # profile # api_tokens # playlists class UserProfile(models.Model): first_name = models.CharField(max_length=255, blank=False, null=False) last_name = models.CharField(max_length=255, blank=False, null=False) patronymic = models.CharField(max_length=255, blank=True, null=True) user = models.OneToOneField('User', on_delete=models.CASCADE, related_name='profile') class ApiToken(models.Model): token = models.CharField(max_length=255, blank=False, null=False, unique=True) user = models.ForeignKey('User', on_delete=models.CASCADE, related_name='api_tokens') ################### class FileType(models.TextChoices): AUDIO = 'audio', 'audio' VIDEO = 'video', 'video' IMAGE = 'image', 'image' class DefaultFilePath(models.TextChoices): FAVORITE_PLAYLIST_COVER = 'storage/default_playlist_cover.jpg', 'storage/default_playlist_cover.jpg' class File(models.Model): file = models.FileField(upload_to='storage/') type = models.CharField( max_length=5, choices=FileType.choices ) @property def filename(self): return str(self.file).split('storage/')[1] # path = models.CharField(max_length=255) # extension = models.CharField(max_length=255) class Artist(models.Model): name = models.CharField(max_length=255) avatar = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') # songs # albums class Song(models.Model): artist = models.ForeignKey(Artist, on_delete=models.RESTRICT, null=True, related_name='songs') audio = models.ForeignKey(File, on_delete=models.RESTRICT, null=False, related_name='+') cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') name = models.CharField(max_length=255) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @property def audio_url(self): return settings.APP_URL + reverse('audio.download', kwargs={'filename': self.audio.filename}) class Playlist(models.Model): name = models.CharField(max_length=255) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') is_public = models.BooleanField(default=False) user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='playlists') songs = models.ManyToManyField(Song) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @staticmethod def create_favorite_playlist_for_user(user): cover = File.objects.filter(file=DefaultFilePath.FAVORITE_PLAYLIST_COVER).get() playlist = Playlist( name='Favorite', cover=cover, is_public=False, user=user ) playlist.save() class Album(models.Model): name = models.CharField(max_length=100) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') artist = models.ForeignKey(Artist, on_delete=models.RESTRICT) songs = models.ManyToManyField(Song) \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0422\u043e\u043a\u0435\u043d\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0424\u0430\u0439\u043b, \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u0430, \u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c, \u041f\u0435\u0441\u043d\u044f, \u041f\u043b\u0435\u0439\u043b\u0438\u0441\u0442, \u0410\u043b\u044c\u0431\u043e\u043c.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"l3/#urlspy","text":"from django.urls import path from musec_app.views import auth from musec_app.views import user from musec_app.views import songs from musec_app.views import files from musec_app.views import playlists urlpatterns = [ # Auth path('register', auth.register, name='auth.register'), path('login', auth.login, name='auth.login'), path('logout', auth.logout, name='auth.logout'), # User path('me', user.me, name='user.me'), # Songs path('songs', songs.index, name='songs.index'), path('songs/<int:song_id>/favorite', songs.toggle_favorite, name='songs.favorite'), path('songs/upload', songs.store, name='songs.store'), # test # Playlists path('playlists', playlists.index, name='playlists.index'), path('playlists/my', playlists.my, name='playlists.my'), # Files path('files/audio/<str:filename>', files.download_audio, name='audio.download'), path('files/image/<str:filename>', files.download_image, name='image.download'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0435\u0441\u043d\u044f\u043c\u0438, \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u0430\u043c\u0438 \u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438.","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py"},{"location":"l3/#serializerspy","text":"\u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django serializers \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 http-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f http-\u043e\u0442\u0432\u0435\u0442\u043e\u0432 from rest_framework import serializers from musec_app.models import File, Song class ProfileSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) first_name = serializers.CharField(max_length=255) last_name = serializers.CharField(max_length=255) patronymic = serializers.CharField(max_length=255) class UserSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) first_name = serializers.CharField(max_length=255, write_only=True) last_name = serializers.CharField(max_length=255, write_only=True) patronymic = serializers.CharField(max_length=255, write_only=True, allow_blank=True, allow_null=True) profile = ProfileSerializer(read_only=True) class UserAuthSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) class TokenSerializer(serializers.Serializer): token = serializers.CharField() class ArtistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) # avatar_url = serializers.CharField(max_length=255) class FileSerializer(serializers.ModelSerializer): class Meta: model = File fields = ['id', 'file'] class SongSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) cover_url = serializers.ReadOnlyField() audio_url = serializers.ReadOnlyField() artist = ArtistSerializer(read_only=True) name = serializers.CharField(max_length=255) artist_id = serializers.IntegerField(write_only=True) audio = serializers.FileField(write_only=True) cover = serializers.FileField(write_only=True) class PlaylistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) cover_url = serializers.ReadOnlyField() songs = SongSerializer(read_only=True, many=True)","title":"serializers.py"},{"location":"l3/#_3","text":"songs.py from django.utils.datastructures import MultiValueDictKeyError from rest_framework.decorators import api_view, authentication_classes, parser_classes from rest_framework.parsers import MultiPartParser from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer, SongSerializer, FileSerializer from musec_app.models import Song, File, FileType @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = {} try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass songs = Song.objects.filter(**filters).all() return api_response.payload(SongSerializer(songs, many=True).data) @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) @parser_classes([MultiPartParser]) def store(request): serializer = SongSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data audio = File( file=data['audio'], type=FileType.AUDIO ) audio.save() cover = File( file=data['cover'], type=FileType.IMAGE ) cover.save() song_data = { 'name': data['name'], 'artist_id': data['artist_id'], 'audio': audio, 'cover': cover, } song = Song(**song_data) song.save() return api_response.success('Song successfully created') @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def toggle_favorite(request, song_id): song = Song.objects.filter(id=song_id).get() if not song: return api_response.not_found('Song was not found.') favorite_playlist = request.user.favorite_playlist if favorite_playlist.songs.filter(id=song_id).all().first(): # already liked favorite_playlist.songs.remove(song) else: favorite_playlist.songs.add(song) return api_response.success() playlists.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import PlaylistSerializer from musec_app.models import Playlist from django.utils.datastructures import MultiValueDictKeyError @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def my(request): playlists = Playlist.objects.filter(user_id=request.user.id, is_public=False).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = { 'user_id': None, 'is_public': True, } try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass playlists = Playlist.objects.filter(**filters).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) files.py from rest_framework.decorators import api_view from musec_app.models import File from musec_app.responses import api_response import os from django.http import HttpResponse from django.conf import settings @api_view(['GET']) def download_audio(_, filename): return get_response('audio/mpeg', filename) @api_view(['GET']) def download_image(_, filename): return get_response('image/png', filename) def get_response(content_type, filename): filename = 'storage/' + filename file = File.objects.filter(file=filename).all().first() if not file: return api_response.not_found() full_path = os.path.join(settings.MEDIA_ROOT, filename) with open(full_path, 'rb') as fh: response = HttpResponse(fh.read(), content_type=content_type) response['Content-Disposition'] = 'inline; filename=' + os.path.basename(full_path) return response user.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def me(request): return api_response.payload(UserSerializer(request.user, context={'profile': True}).data) auth.py import string import random from rest_framework.decorators import api_view, authentication_classes from musec_app.serializers import UserSerializer, UserAuthSerializer, TokenSerializer from musec_app.models import User, ApiToken, UserProfile, Playlist from musec_app.responses import api_response from musec_app.auth.authentication import AppTokenAuthentication from django.contrib.auth.hashers import PBKDF2SHA1PasswordHasher as PasswordHasher @api_view(['POST']) def register(request): serializer = UserSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data if User.objects.filter(email=data['email']).count() > 0: return api_response.error('The user with given email is already registered', 422) hasher = PasswordHasher() user = User.objects.create(email=data['email'], password=hasher.encode(data['password'], hasher.salt())) user.save() profile = UserProfile( first_name=data['first_name'], last_name=data['last_name'], patronymic=data['patronymic'], user=user ) profile.save() Playlist.create_favorite_playlist_for_user(user) return api_response.payload(UserSerializer(user).data) @api_view(['POST']) def login(request): serializer = UserAuthSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) email = serializer.validated_data['email'] password = serializer.validated_data['password'] user = User.objects.filter(email=email).first() if not user: return api_response.not_found('User not found') hasher = PasswordHasher() if not hasher.verify(password, user.password): return api_response.unauthenticated() source = string.ascii_letters + string.digits token = ''.join((random.choice(source) for _ in range(128))) api_token = ApiToken(token=token, user=user) api_token.save() response = api_response.payload(TokenSerializer({'token': token}).data) response.set_cookie( key='api_token', value=token, httponly=True ) return response @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def logout(request): request.auth.delete() return api_response.success('Successfully logged out.') api_response.py from django.http import JsonResponse def success(message='Success'): return JsonResponse( data=format_payload(message), status=200 ) def payload(data): return JsonResponse( data=format_payload(data=data), status=200 ) # Errors def unauthenticated(): return JsonResponse( data=format_payload('Invalid credentials'), status=401 ) def validation_error(errors, message='Validation error'): return JsonResponse( data=format_payload(message, None, errors), status=422 ) def not_found(message='Not found'): return JsonResponse( data=format_payload(message), status=404, ) def error(message='Error', status=400): return JsonResponse( data=format_payload(message), status=status ) # Internal def format_payload(message=None, data=None, errors=None): return { 'message': message, 'data': data if data else [], 'errors': errors if errors else [], } authentication.py from rest_framework.authentication import BaseAuthentication, get_authorization_header from django.core.exceptions import ObjectDoesNotExist from rest_framework import exceptions from musec_app.models import User, ApiToken class AppTokenAuthentication(BaseAuthentication): def authenticate(self, request): try: token = request.COOKIES['api_token'] api_token = ApiToken.objects.filter(token=token).get() except KeyError: raise exceptions.AuthenticationFailed('Unauthenticated') except ObjectDoesNotExist: raise exceptions.AuthenticationFailed('Unauthenticated') return api_token.user, api_token def authenticate_header(self, request): return 'Token'","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"l3/#api","text":"","title":"\u041e\u0431\u0437\u043e\u0440 API"},{"location":"l3/#auth","text":"POST /register POST /login POST /logout","title":"AUTH"},{"location":"l3/#user","text":"GET /me","title":"User"},{"location":"l3/#songs","text":"GET /songs POST /songs/<id>/favorite POST /songs/upload","title":"Songs"},{"location":"l3/#filesaudio","text":"GET /files/audio/<path>","title":"Files/Audio"},{"location":"l3/#filesimage","text":"GET /files/image/<path>","title":"Files/Image"},{"location":"l3/#playlists","text":"GET /playlists/my GET /playlists?search=q","title":"Playlists"},{"location":"l3/#_4","text":"\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d API \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"}]}