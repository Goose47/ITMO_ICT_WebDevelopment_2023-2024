{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js \u0426\u0435\u043b\u044c: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.jss \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440 \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f vue-router \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438: @/router/routes.js import HomePage from \"../views/HomePage.vue\"; import ProfilePage from \"../views/ProfilePage.vue\"; import SearchPage from \"../views/SearchPage.vue\"; import LoginPage from \"../views/auth/LoginPage.vue\"; import RegisterPage from \"../views/auth/RegisterPage.vue\"; import NotFoundPage from \"../views/NotFoundPage.vue\"; import SecureComponent from \"../components/SecureComponent.vue\"; import PublicComponent from \"../components/PublicComponent.vue\"; export default [ { path: '', meta: { requiresAuth: true }, component: SecureComponent, children: [ { path: '', name: 'home', component: HomePage }, { path: '/profile', name: 'profile', component: ProfilePage }, { path: '/search', name: 'search', component: SearchPage }, ], }, { path: '', meta: { blockedForAuthenticated: true }, component: PublicComponent, children: [ { path: '/login', name: 'login', component: LoginPage, }, { path: '/register', name: 'register', component: RegisterPage, }, ], }, { name: '404', path: '/:catchAll(.*)', component: NotFoundPage } ] @/router/index.js import { createRouter, createWebHistory } from 'vue-router' import routes from './routes.js' import useAuthStore from \"../pinia/auth\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: routes, }) router.beforeEach(async (to, from) => { let user let authStore = useAuthStore() user = await authStore.getUser() if(to.meta.requiresAuth && !user) { return { name: 'login' } } if(to.meta.blockedForAuthenticated && user) { return { name: 'home' } } }) export default router \u041f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u043e\u0443\u0442\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0438\u043b\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f pinia. \u0412\u0441\u0435\u0433\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 store\u2019a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0442\u0440\u0435\u043a\u0430\u043c\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f @/pinia/auth.js import { defineStore } from 'pinia' import router from \"../router\"; import http from \"../services/httpClient\"; const useAuthStore = defineStore('auth', { state: () => ({ user: null, }), getters: { isAuthenticated() { return this.user !== null }, }, actions: { setUser(user) { this.user = user }, register(user) { http.post( 'register', {...user}, ).then(res => { router.push({name: 'login'}) }).catch(e => { // }) }, login(user) { http.post( 'login', {...user} ).then(res => { router.push({name: 'home'}) }).catch(err => { // }) }, logout() { http.post( 'logout', ).then(res => { this.$reset() router.push({name: 'login'}) }) }, async getUser() { if (!this.user) { let user try { user = (await http.get('me')).data } catch (e) { user = null } this.user = user } return this.user }, }, persist: true, }) export default useAuthStore @/pinia/player.js import { defineStore } from 'pinia' const usePlayerStore = defineStore('player', { state: () => ({ currentSong: null, playlist: [], }), getters: { getCurrentSong() { return this.playlist[this.currentSong] }, }, actions: { setCurrentSong(song) { this.playlist = [song] this.currentSong = 0 }, addToPlaylist(song) { this.playlist.push(song) }, setCurrentPlaylist(playlist, play = true) { this.playlist = playlist if (play) { this.currentSong = 0 } }, playNextSong() { if (this.playlist.length > this.currentSong + 1) { this.currentSong += 1 } }, playPreviousSong() { if (this.currentSong > 0) { this.currentSong -= 1 } }, }, persist: true, }) export default usePlayerStore \u0414\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 pinia-plugin-persistedstate. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a api \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f axios: @/services/httpClient.js import axios from \"axios\" class HttpClient { get( url, params ) { return new Promise((resolve, reject) => { axios.get(url, {params: params}).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } post( url, data ) { return new Promise((resolve, reject) => { axios.post(url, data).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } } export default new HttpClient() \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 vue.js, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 API, \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"l-4"},{"location":"#vuejs","text":"\u0426\u0435\u043b\u044c: \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.jss","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js"},{"location":"#_1","text":"\u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440","title":"\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_2","text":"\u0412 \u0440\u0430\u0431\u043e\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f vue-router \u0434\u043b\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u0438: @/router/routes.js import HomePage from \"../views/HomePage.vue\"; import ProfilePage from \"../views/ProfilePage.vue\"; import SearchPage from \"../views/SearchPage.vue\"; import LoginPage from \"../views/auth/LoginPage.vue\"; import RegisterPage from \"../views/auth/RegisterPage.vue\"; import NotFoundPage from \"../views/NotFoundPage.vue\"; import SecureComponent from \"../components/SecureComponent.vue\"; import PublicComponent from \"../components/PublicComponent.vue\"; export default [ { path: '', meta: { requiresAuth: true }, component: SecureComponent, children: [ { path: '', name: 'home', component: HomePage }, { path: '/profile', name: 'profile', component: ProfilePage }, { path: '/search', name: 'search', component: SearchPage }, ], }, { path: '', meta: { blockedForAuthenticated: true }, component: PublicComponent, children: [ { path: '/login', name: 'login', component: LoginPage, }, { path: '/register', name: 'register', component: RegisterPage, }, ], }, { name: '404', path: '/:catchAll(.*)', component: NotFoundPage } ] @/router/index.js import { createRouter, createWebHistory } from 'vue-router' import routes from './routes.js' import useAuthStore from \"../pinia/auth\"; const router = createRouter({ history: createWebHistory(import.meta.env.BASE_URL), routes: routes, }) router.beforeEach(async (to, from) => { let user let authStore = useAuthStore() user = await authStore.getUser() if(to.meta.requiresAuth && !user) { return { name: 'login' } } if(to.meta.blockedForAuthenticated && user) { return { name: 'home' } } }) export default router \u041f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u043e\u0443\u0442\u0435\u0440 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u0438\u043b\u0438 \u0431\u043b\u043e\u043a\u0438\u0440\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u043c \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f pinia. \u0412\u0441\u0435\u0433\u043e \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 store\u2019a \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u043c\u0438 \u0442\u0440\u0435\u043a\u0430\u043c\u0438 \u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f @/pinia/auth.js import { defineStore } from 'pinia' import router from \"../router\"; import http from \"../services/httpClient\"; const useAuthStore = defineStore('auth', { state: () => ({ user: null, }), getters: { isAuthenticated() { return this.user !== null }, }, actions: { setUser(user) { this.user = user }, register(user) { http.post( 'register', {...user}, ).then(res => { router.push({name: 'login'}) }).catch(e => { // }) }, login(user) { http.post( 'login', {...user} ).then(res => { router.push({name: 'home'}) }).catch(err => { // }) }, logout() { http.post( 'logout', ).then(res => { this.$reset() router.push({name: 'login'}) }) }, async getUser() { if (!this.user) { let user try { user = (await http.get('me')).data } catch (e) { user = null } this.user = user } return this.user }, }, persist: true, }) export default useAuthStore @/pinia/player.js import { defineStore } from 'pinia' const usePlayerStore = defineStore('player', { state: () => ({ currentSong: null, playlist: [], }), getters: { getCurrentSong() { return this.playlist[this.currentSong] }, }, actions: { setCurrentSong(song) { this.playlist = [song] this.currentSong = 0 }, addToPlaylist(song) { this.playlist.push(song) }, setCurrentPlaylist(playlist, play = true) { this.playlist = playlist if (play) { this.currentSong = 0 } }, playNextSong() { if (this.playlist.length > this.currentSong + 1) { this.currentSong += 1 } }, playPreviousSong() { if (this.currentSong > 0) { this.currentSong -= 1 } }, }, persist: true, }) export default usePlayerStore \u0414\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 pinia-plugin-persistedstate. \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0441\u0435\u0441\u0441\u0438\u044e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0438\u0433\u0440\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442 \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0414\u043b\u044f \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a api \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f axios: @/services/httpClient.js import axios from \"axios\" class HttpClient { get( url, params ) { return new Promise((resolve, reject) => { axios.get(url, {params: params}).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } post( url, data ) { return new Promise((resolve, reject) => { axios.post(url, data).then(res => { resolve(res.data) }).catch(e => { reject(e) }) }) } } export default new HttpClient()","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"#_3","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043b\u043e\u0433\u0438\u043d\u0430 \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u043e\u0438\u0441\u043a\u0430 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u043f\u0440\u043e\u0444\u0438\u043b\u044f","title":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u044b \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"#_4","text":"\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0430 vue.js, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0435\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 API, \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"l1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e. * \u0421\u0435\u0440\u0432\u0435\u0440: * \u041a\u043b\u0438\u0435\u043d\u0442: client.py : import socket MESSAGE = 'Hello, Server' def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(MESSAGE.encode('utf-8'), ('localhost', 9090)) message, addr = sock.recvfrom(1024) print(message.decode('utf-8')) if __name__ == '__main__': run() server.py : import socket MESSAGE = 'Hello, Client' def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9090)) while True: data, addr = sock.recvfrom(1024) print(data.decode('utf-8')) sock.sendto(MESSAGE.encode('utf-8'), addr) if __name__ == '__main__': run() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u0432 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u0432\u0432\u043e\u0434\u0438\u0442 \u0434\u043b\u0438\u043d\u044b \u043a\u0430\u0442\u0435\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pickle , \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0431\u0430\u0439\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e\u0441\u043b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0441\u0447\u0435\u0442\u0430. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043f\u0440\u043e\u0441\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0437\u0430\u043d\u043e\u0432\u043e * \u041a\u043b\u0438\u0435\u043d\u0442: client.py : import socket import pickle def run(): input_in_progress = True while input_in_progress: a = input(\"enter a ==>\") b = input(\"enter b ==>\") if a.isnumeric() and b.isnumeric(): input_in_progress = False else: print('a, b must be numbers, please re-enter the values') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9090)) payload = {a, b} sock.send(pickle.dumps(payload)) res = sock.recv(1024) sock.close() print(res.decode('utf-8')) if __name__ == '__main__': run() server.py : import socket import pickle import math def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9090)) sock.listen(1) while True: conn, addr = sock.accept() data = conn.recv(1024) if not data: break a, b = pickle.loads(data) if not a or not b: conn.send('a and b must be present and be type of number'.encode('utf-8')) res = math.sqrt(float(a)**2 + float(b)**2) conn.send(str(res).encode('utf-8')) conn.close() if __name__ == '__main__': run() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043a\u0440\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTTP \u043e\u0442\u0432\u0435\u0442 \u0441 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello server. server.py : import socket def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9090)) sock.listen(1) while True: conn, addr = sock.accept() request_data = conn.recv(1024) with open('C:\\\\Users\\\\tyumi\\\\Desktop\\\\web\\\\students\\\\k33402\\\\Tiumin_Nikita\\\\l1\\\\3_html\\\\index.html', 'r') as f: html = f.read() conn.send(encode('HTTP/1.0 200 OK\\n')) conn.send(encode('Content-Type: text/html\\n')) conn.send(encode('\\n')) conn.send(encode(html)) conn.close() def encode(msg): return msg.encode('utf-8') if __name__ == '__main__': run() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 threading . \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043c\u044f \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0434\u0432\u0430 \u043f\u043e\u0442\u043e\u043a\u0430: \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0432\u0442\u043e\u0440\u043e\u0439 - \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043d\u043e\u0432\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u0435\u0433\u043e \u0438\u043c\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041a\u043e\u0433\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u043d\u043e \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u0442\u043e\u043a \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f, \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f. * \u0421\u0435\u0440\u0432\u0435\u0440: * \u041a\u043b\u0438\u0435\u043d\u0442\u044b: client.py : import socket import threading HEADER_LENGTH = 10 def encode_message(msg): header = f'{len(msg):<{HEADER_LENGTH}}'.encode('utf-8') message = msg.encode('utf-8') return header + message def receive_message(client_socket): try: message_header = client_socket.recv(HEADER_LENGTH) if not message_header: return False message_length = int(message_header.decode('utf-8').strip()) return client_socket.recv(message_length).decode('utf-8') except: return False if __name__ == '__main__': client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 9092)) name = input('enter your name =>') client_socket.send(encode_message(name)) def send_messages(): while True: message = input() client_socket.send(encode_message(message)) def receive_messages(): while True: message = receive_message(client_socket) if message: print(message) send_messages_thread = threading.Thread(target=send_messages) send_messages_thread.start() receive_messages_thread = threading.Thread(target=receive_messages) receive_messages_thread.start() server.py : import socket import threading HEADER_LENGTH = 10 def encode_message(msg): header = f'{len(msg):<{HEADER_LENGTH}}'.encode('utf-8') message = msg.encode('utf-8') return header + message def receive_message(client_socket): try: message_header = client_socket.recv(HEADER_LENGTH) if not message_header: return False message_length = int(message_header.decode('utf-8').strip()) return client_socket.recv(message_length).decode('utf-8') except: return False if __name__ == '__main__': clients = [] server_socket = socket.socket() server_socket.bind(('', 9092)) server_socket.listen() def accept_client(): while True: client_socket, addr = server_socket.accept() username = receive_message(client_socket) next_client = (client_socket, username) clients.append(next_client) print(f'{username} connected') next_client_thread = threading.Thread(target=get_message_from_client, args=(next_client,)) next_client_thread.start() def get_message_from_client(next_client): client_socket, username = next_client while True: message = receive_message(client_socket) message_to_send = encode_message(f'{username}: {message}') if message: print(f'{username} sent {message}') for notify_client, u in clients: if notify_client != client_socket: notify_client.send(message_to_send) print(f'sent {message} to {u}') else: print(f'{username} disconnected') clients[:] = [i for i in clients if i[0] != client_socket] break thread_accept_client = threading.Thread(target=accept_client) thread_accept_client.start() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u0440\u0438 \u043d\u043e\u0432\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0437 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 http-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 , \u043c\u0435\u0442\u043e\u0434 \u0438 url. \u041f\u043e\u0441\u043b\u0435 \u043f\u0430\u0440\u0441\u044f\u0442\u0441\u044f url-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e POST-\u0437\u0430\u043f\u0440\u043e\u0441, \u043f\u0430\u0440\u0441\u0438\u0442\u0441\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 json-\u043e\u0431\u044a\u0435\u043a\u0442. \u041f\u043e\u0441\u043b\u0435 \u043c\u0435\u0442\u043e\u0434 \u0438 url \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 (html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0438\u043b\u0438 json-\u043e\u0431\u044a\u0435\u043a\u0442). \u041f\u043e\u0441\u043b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f http-\u043e\u0442\u0432\u0435\u0442: \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435, \u0441\u0442\u0430\u0442\u0443\u0441-\u043a\u043e\u0434, \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u0438\u043b\u0438 json. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: * GET /disciplines\\ \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b * POST /disciplines\\ \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 json \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0434 server.py : import socket from discipline_controller import DisciplineController import json import sys class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.server_socket = None self.method = None self.url = None self.protocol = None self.parameters = {} self.post_data = {} self.headers = {} self.discipline_controller = DisciplineController() def serve_forever(self): server_socket = socket.socket() server_socket.bind((self.host, self.port)) server_socket.listen() self.server_socket = server_socket while True: self.serve_client() def serve_client(self): client_socket, addr = self.server_socket.accept() request = client_socket.recv(1024) try: self.parse_request(request) response = self.handle_request() self.send_response(client_socket, response) print('response sent successfully') except ValueError as e: print('empty request') except Exception as e: print(e) def parse_request(self, request): request = request.decode('utf-8') request = request.split('\\r\\n') method, url, protocol = request[0].split(' ') self.method, self.url, self.protocol = method.strip(' '), url.strip(' '), protocol.strip(' ') # GET parameters parameters = {} if len(url.split('?')) > 1: url, raw_parameters = url.split('?') self.url = url raw_parameters = raw_parameters.split('&') for parameter in raw_parameters: name, value = parameter.split('=') parameters[name] = value self.parameters = parameters headers_stop_index = request.index('') self.headers = self.parse_headers(request[1:headers_stop_index]) # POST parameters if method == 'POST': raw_data = ''.join(request[headers_stop_index + 1:]) self.post_data = json.loads(raw_data) def parse_headers(self, headers): parsed_headers = {} for header in headers: name, value = header.split(':', 1) name, value = name.strip(' '), value.strip(' ') parsed_headers[name] = value return parsed_headers def handle_request(self): try: route = self.get_routes()[self.url][self.method] if self.method == 'GET': return getattr(route['controller'], route['method'])(self.parameters) elif self.method == 'POST': return getattr(route['controller'], route['method'])(self.post_data) except KeyError as e: with open('C:\\\\Users\\\\tyumi\\\\Desktop\\\\web\\\\students\\\\k33402\\\\Tiumin_Nikita\\\\l1\\\\5_web_server\\\\not_found.html', 'r') as f: html = f.read() return {'type': 'html', 'code': 404, 'data': html} def send_response(self, client_socket, response): reasons = { 200: 'OK', 404: 'NOT FOUND', 422: 'UNPROCESSABLE ENTITY', } if response[\"type\"] == 'html': response_body_raw = response[\"data\"].encode('utf-8') else: response_body_raw = json.dumps(response['data']).encode('utf-8') response_headers = { 'Content-Type': f'{\"text/html\" if response[\"type\"] == \"html\" else \"application/json\"}; encoding=utf8', 'Content-Length': len(response_body_raw), 'Connection': 'close', } client_socket.send(f'{self.protocol} {response[\"code\"]} {reasons[response[\"code\"]]}\\n'.encode('utf-8')) # status line client_socket.send(''.join(f'{name}: {response_headers[name]}\\n' for i, name in enumerate(response_headers)).encode('utf-8')) # headers client_socket.send('\\n'.encode('utf-8')) client_socket.send(response_body_raw) # body def get_routes(self): return { '/disciplines': { 'GET': {'controller': self.discipline_controller, 'method': 'index'}, 'POST': {'controller': self.discipline_controller, 'method': 'store'}, } } if __name__ == '__main__': host = '' port = 9000 name = 'name' serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass discipline_controller.py : class DisciplineController: def __init__(self): self.fake_db = {} self.last_id = 0 def index(self, parameters): with open('C:\\\\Users\\\\tyumi\\\\Desktop\\\\web\\\\students\\\\k33402\\\\Tiumin_Nikita\\\\l1\\\\5_web_server\\\\index.html') as f: html = f.read() html_to_insert = '' for name in self.fake_db: for grade in self.fake_db[name]: html_to_insert += '<tr>' html_to_insert += '<td>' + name + '</td>' html_to_insert += '<td>' + grade + '</td>' html_to_insert += '</td>' html = html.replace('#content', html_to_insert) return {'type': 'html', 'code': 200, 'data': html} def store(self, data): if 'name' not in data or 'grade' not in data: return {'type': 'json', 'code': 422, 'data': {'error': 'name and grade are required'}} if data['name'] in self.fake_db: self.fake_db[self.escape(data['name'])].append(self.escape(data['grade'])) else: self.fake_db[self.escape(data['name'])] = [self.escape(data['grade'])] print(self.fake_db) return {'type': 'json', 'code': 200, 'data': {'success': True}} def escape(self, string): return str(string).replace(\"&\", \"&amp;\").replace('\"', \"&quot;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")","title":"l-1"},{"location":"l1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"l1/#no1_1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"l1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e. * \u0421\u0435\u0440\u0432\u0435\u0440: * \u041a\u043b\u0438\u0435\u043d\u0442: client.py : import socket MESSAGE = 'Hello, Server' def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(MESSAGE.encode('utf-8'), ('localhost', 9090)) message, addr = sock.recvfrom(1024) print(message.decode('utf-8')) if __name__ == '__main__': run() server.py : import socket MESSAGE = 'Hello, Client' def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9090)) while True: data, addr = sock.recvfrom(1024) print(data.decode('utf-8')) sock.sendto(MESSAGE.encode('utf-8'), addr) if __name__ == '__main__': run()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"l1/#no2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"l1/#_2","text":"\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043a\u0440\u0438\u043f\u0442 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u0432 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u043c \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0435. \u041a\u043b\u0438\u0435\u043d\u0442 \u0432\u0432\u043e\u0434\u0438\u0442 \u0434\u043b\u0438\u043d\u044b \u043a\u0430\u0442\u0435\u0442\u043e\u0432 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 pickle , \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u0441 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 \u0431\u0430\u0439\u0442\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u043f\u043e\u0441\u043b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0440\u0430\u0441\u0447\u0435\u0442\u0430. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043f\u0440\u043e\u0441\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0437\u0430\u043d\u043e\u0432\u043e * \u041a\u043b\u0438\u0435\u043d\u0442: client.py : import socket import pickle def run(): input_in_progress = True while input_in_progress: a = input(\"enter a ==>\") b = input(\"enter b ==>\") if a.isnumeric() and b.isnumeric(): input_in_progress = False else: print('a, b must be numbers, please re-enter the values') sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('localhost', 9090)) payload = {a, b} sock.send(pickle.dumps(payload)) res = sock.recv(1024) sock.close() print(res.decode('utf-8')) if __name__ == '__main__': run() server.py : import socket import pickle import math def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9090)) sock.listen(1) while True: conn, addr = sock.accept() data = conn.recv(1024) if not data: break a, b = pickle.loads(data) if not a or not b: conn.send('a and b must be present and be type of number'.encode('utf-8')) res = math.sqrt(float(a)**2 + float(b)**2) conn.send(str(res).encode('utf-8')) conn.close() if __name__ == '__main__': run()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443"},{"location":"l1/#no3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"l1/#_3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u043a\u0440\u043f\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTTP \u043e\u0442\u0432\u0435\u0442 \u0441 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello server. server.py : import socket def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 9090)) sock.listen(1) while True: conn, addr = sock.accept() request_data = conn.recv(1024) with open('C:\\\\Users\\\\tyumi\\\\Desktop\\\\web\\\\students\\\\k33402\\\\Tiumin_Nikita\\\\l1\\\\3_html\\\\index.html', 'r') as f: html = f.read() conn.send(encode('HTTP/1.0 200 OK\\n')) conn.send(encode('Content-Type: text/html\\n')) conn.send(encode('\\n')) conn.send(encode(html)) conn.close() def encode(msg): return msg.encode('utf-8') if __name__ == '__main__': run()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"l1/#no4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"l1/#_4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 threading . \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043c\u044f \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0434\u0432\u0430 \u043f\u043e\u0442\u043e\u043a\u0430: \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0432\u0442\u043e\u0440\u043e\u0439 - \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0440\u0435\u0436\u0438\u043c\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u043d\u044f\u0442\u0438\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u043d\u043e\u0432\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u0435\u0433\u043e \u0438\u043c\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438 \u0434\u043b\u044f \u043d\u0435\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041a\u043e\u0433\u0434\u0430 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043e\u043d\u043e \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u0442\u0441\u044f \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f, \u043f\u043e\u0442\u043e\u043a \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442\u0441\u044f, \u043a\u043b\u0438\u0435\u043d\u0442 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f. * \u0421\u0435\u0440\u0432\u0435\u0440: * \u041a\u043b\u0438\u0435\u043d\u0442\u044b: client.py : import socket import threading HEADER_LENGTH = 10 def encode_message(msg): header = f'{len(msg):<{HEADER_LENGTH}}'.encode('utf-8') message = msg.encode('utf-8') return header + message def receive_message(client_socket): try: message_header = client_socket.recv(HEADER_LENGTH) if not message_header: return False message_length = int(message_header.decode('utf-8').strip()) return client_socket.recv(message_length).decode('utf-8') except: return False if __name__ == '__main__': client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 9092)) name = input('enter your name =>') client_socket.send(encode_message(name)) def send_messages(): while True: message = input() client_socket.send(encode_message(message)) def receive_messages(): while True: message = receive_message(client_socket) if message: print(message) send_messages_thread = threading.Thread(target=send_messages) send_messages_thread.start() receive_messages_thread = threading.Thread(target=receive_messages) receive_messages_thread.start() server.py : import socket import threading HEADER_LENGTH = 10 def encode_message(msg): header = f'{len(msg):<{HEADER_LENGTH}}'.encode('utf-8') message = msg.encode('utf-8') return header + message def receive_message(client_socket): try: message_header = client_socket.recv(HEADER_LENGTH) if not message_header: return False message_length = int(message_header.decode('utf-8').strip()) return client_socket.recv(message_length).decode('utf-8') except: return False if __name__ == '__main__': clients = [] server_socket = socket.socket() server_socket.bind(('', 9092)) server_socket.listen() def accept_client(): while True: client_socket, addr = server_socket.accept() username = receive_message(client_socket) next_client = (client_socket, username) clients.append(next_client) print(f'{username} connected') next_client_thread = threading.Thread(target=get_message_from_client, args=(next_client,)) next_client_thread.start() def get_message_from_client(next_client): client_socket, username = next_client while True: message = receive_message(client_socket) message_to_send = encode_message(f'{username}: {message}') if message: print(f'{username} sent {message}') for notify_client, u in clients: if notify_client != client_socket: notify_client.send(message_to_send) print(f'sent {message} to {u}') else: print(f'{username} disconnected') clients[:] = [i for i in clients if i[0] != client_socket] break thread_accept_client = threading.Thread(target=accept_client) thread_accept_client.start()","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"l1/#no5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"l1/#_5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u0440\u0438 \u043d\u043e\u0432\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0437 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 http-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 , \u043c\u0435\u0442\u043e\u0434 \u0438 url. \u041f\u043e\u0441\u043b\u0435 \u043f\u0430\u0440\u0441\u044f\u0442\u0441\u044f url-\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438, \u0432 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e POST-\u0437\u0430\u043f\u0440\u043e\u0441, \u043f\u0430\u0440\u0441\u0438\u0442\u0441\u044f \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0439 json-\u043e\u0431\u044a\u0435\u043a\u0442. \u041f\u043e\u0441\u043b\u0435 \u043c\u0435\u0442\u043e\u0434 \u0438 url \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0438\u043c\u0435\u044e\u0449\u0438\u043c\u0438\u0441\u044f \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c\u0438, \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 (html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0438\u043b\u0438 json-\u043e\u0431\u044a\u0435\u043a\u0442). \u041f\u043e\u0441\u043b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f http-\u043e\u0442\u0432\u0435\u0442: \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435, \u0441\u0442\u0430\u0442\u0443\u0441-\u043a\u043e\u0434, \u043d\u0443\u0436\u043d\u044b\u0435 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u0438\u043b\u0438 json. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0434\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: * GET /disciplines\\ \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0441\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b * POST /disciplines\\ \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 json \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u0445 \u0432 \u0431\u0434 server.py : import socket from discipline_controller import DisciplineController import json import sys class MyHTTPServer: def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.server_socket = None self.method = None self.url = None self.protocol = None self.parameters = {} self.post_data = {} self.headers = {} self.discipline_controller = DisciplineController() def serve_forever(self): server_socket = socket.socket() server_socket.bind((self.host, self.port)) server_socket.listen() self.server_socket = server_socket while True: self.serve_client() def serve_client(self): client_socket, addr = self.server_socket.accept() request = client_socket.recv(1024) try: self.parse_request(request) response = self.handle_request() self.send_response(client_socket, response) print('response sent successfully') except ValueError as e: print('empty request') except Exception as e: print(e) def parse_request(self, request): request = request.decode('utf-8') request = request.split('\\r\\n') method, url, protocol = request[0].split(' ') self.method, self.url, self.protocol = method.strip(' '), url.strip(' '), protocol.strip(' ') # GET parameters parameters = {} if len(url.split('?')) > 1: url, raw_parameters = url.split('?') self.url = url raw_parameters = raw_parameters.split('&') for parameter in raw_parameters: name, value = parameter.split('=') parameters[name] = value self.parameters = parameters headers_stop_index = request.index('') self.headers = self.parse_headers(request[1:headers_stop_index]) # POST parameters if method == 'POST': raw_data = ''.join(request[headers_stop_index + 1:]) self.post_data = json.loads(raw_data) def parse_headers(self, headers): parsed_headers = {} for header in headers: name, value = header.split(':', 1) name, value = name.strip(' '), value.strip(' ') parsed_headers[name] = value return parsed_headers def handle_request(self): try: route = self.get_routes()[self.url][self.method] if self.method == 'GET': return getattr(route['controller'], route['method'])(self.parameters) elif self.method == 'POST': return getattr(route['controller'], route['method'])(self.post_data) except KeyError as e: with open('C:\\\\Users\\\\tyumi\\\\Desktop\\\\web\\\\students\\\\k33402\\\\Tiumin_Nikita\\\\l1\\\\5_web_server\\\\not_found.html', 'r') as f: html = f.read() return {'type': 'html', 'code': 404, 'data': html} def send_response(self, client_socket, response): reasons = { 200: 'OK', 404: 'NOT FOUND', 422: 'UNPROCESSABLE ENTITY', } if response[\"type\"] == 'html': response_body_raw = response[\"data\"].encode('utf-8') else: response_body_raw = json.dumps(response['data']).encode('utf-8') response_headers = { 'Content-Type': f'{\"text/html\" if response[\"type\"] == \"html\" else \"application/json\"}; encoding=utf8', 'Content-Length': len(response_body_raw), 'Connection': 'close', } client_socket.send(f'{self.protocol} {response[\"code\"]} {reasons[response[\"code\"]]}\\n'.encode('utf-8')) # status line client_socket.send(''.join(f'{name}: {response_headers[name]}\\n' for i, name in enumerate(response_headers)).encode('utf-8')) # headers client_socket.send('\\n'.encode('utf-8')) client_socket.send(response_body_raw) # body def get_routes(self): return { '/disciplines': { 'GET': {'controller': self.discipline_controller, 'method': 'index'}, 'POST': {'controller': self.discipline_controller, 'method': 'store'}, } } if __name__ == '__main__': host = '' port = 9000 name = 'name' serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass discipline_controller.py : class DisciplineController: def __init__(self): self.fake_db = {} self.last_id = 0 def index(self, parameters): with open('C:\\\\Users\\\\tyumi\\\\Desktop\\\\web\\\\students\\\\k33402\\\\Tiumin_Nikita\\\\l1\\\\5_web_server\\\\index.html') as f: html = f.read() html_to_insert = '' for name in self.fake_db: for grade in self.fake_db[name]: html_to_insert += '<tr>' html_to_insert += '<td>' + name + '</td>' html_to_insert += '<td>' + grade + '</td>' html_to_insert += '</td>' html = html.replace('#content', html_to_insert) return {'type': 'html', 'code': 200, 'data': html} def store(self, data): if 'name' not in data or 'grade' not in data: return {'type': 'json', 'code': 422, 'data': {'error': 'name and grade are required'}} if data['name'] in self.fake_db: self.fake_db[self.escape(data['name'])].append(self.escape(data['grade'])) else: self.fake_db[self.escape(data['name'])] = [self.escape(data['grade'])] print(self.fake_db) return {'type': 'json', 'code': 200, 'data': {'success': True}} def escape(self, string): return str(string).replace(\"&\", \"&amp;\").replace('\"', \"&quot;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"l2/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django. \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\\ \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u041c\u043e\u0434\u0435\u043b\u0438 class User(AbstractUser): is_teacher = models.BooleanField(default=False) class Subject(models.Model): name = models.CharField(max_length=100) def __str__(self): return self.name class Homework(models.Model): subject = models.ForeignKey(Subject, on_delete=models.CASCADE) teacher = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) issue_date = models.DateField() deadline = models.DateField() description = models.TextField() penalties = models.DecimalField(max_digits=5, decimal_places=2, default=0) def __str__(self): return f\"\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e {self.subject.name}\" class HomeworkSubmission(models.Model): student = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) homework = models.ForeignKey(Homework, on_delete=models.CASCADE) submission_text = models.TextField() submission_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u0421\u0434\u0430\u0447\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f '{self.homework}' \u043e\u0442 {self.student.username}\" class HomeworkGrade(models.Model): homework_submission = models.OneToOneField(HomeworkSubmission, on_delete=models.CASCADE) grade = models.PositiveIntegerField() graded_by = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) graded_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0441\u0434\u0430\u0447\u0443 '{self.homework_submission.homework}' \u043e\u0442 {self.homework_submission.student.username}\" \u0411\u044b\u043b\u0430 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a \u043d\u0435\u0439 \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u043b\u044c \u0443\u0447\u0435\u043d\u0438\u043a\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django-admin. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py from django.urls import path from django.contrib.auth.views import LogoutView from . import views urlpatterns = [ # Student path('', views.home, name='home'), path('homeworks/<int:subject_id>', views.index_homeworks, name='homeworks.index'), path('homeworks/show/<int:hw_id>', views.show_homeworks, name='homeworks.show'), path('submissions/', views.store_submission, name='submissions.store'), # Teacher path('journal', views.journal, name='journal'), path('submissions/<int:s_id>', views.show_submission, name='submissions.show'), path('grades', views.store_grade, name='grades.store'), # Auth path('register/', views.register, name='register'), path('login/', views.user_login, name='login'), path('logout/', views.user_logout, name='logout'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u044f. \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f views.py \u041a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041d\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432 - \u0438\u0445 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043c\u043e\u0433\u0443\u0442. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0436\u0443\u0440\u043d\u0430\u043b \u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a, \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. from homeworks.forms import RegisterForm, LoginForm from django.shortcuts import render, redirect from django.contrib.auth import login, authenticate, logout from django.contrib.auth.decorators import login_required from django.utils import timezone from django.core.exceptions import ObjectDoesNotExist from functools import wraps from django.db.models.functions import ExtractDay from homeworks.models import Subject, Homework, HomeworkSubmission, User, HomeworkGrade def anonymous_required(view_func): @wraps(view_func) def _wrapped_view(request, *args, **kwargs): if request.user.is_authenticated: return redirect('home') else: return view_func(request, *args, **kwargs) return _wrapped_view # AUTH @anonymous_required def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): new_user = form.save(commit=False) new_user.is_teacher = False new_user.save() return redirect('login') else: form = RegisterForm() return render(request, 'auth/register.html', {'form': form}) @anonymous_required def user_login(request): if request.method == 'POST': form = LoginForm(request, data=request.POST) if form.is_valid(): user = form.get_user() login(request, user) return redirect('home') else: form = LoginForm() return render(request, 'auth/login.html', {'form': form}) @login_required def user_logout(request): logout(request) return redirect('login') # System def handler404(request, exception): return render(request, 'system/404.html', status=404) # Student @login_required def home(request): subjects = Subject.objects.all() return render(request, 'home.html', { 'subjects': subjects, }) @login_required def index_homeworks(request, subject_id): subject = Subject.objects.get(pk=subject_id) homeworks = Homework.objects.filter(subject_id=subject_id).all() return render(request, 'student/homeworks.index.html', { 'subject': subject.name, 'homeworks': homeworks, }) @login_required def show_homeworks(request, hw_id): homework = Homework.objects.get(pk=hw_id) try: submission = HomeworkSubmission.objects.filter(student_id=request.user.id, homework_id=hw_id).get() except ObjectDoesNotExist: submission = None return render(request, 'student/homeworks.show.html', { 'homework': homework, 'submission': submission.submission_text if submission else None, 'is_submitted': submission is not None, }) @login_required def store_submission(request): data = request.POST submission = HomeworkSubmission( submission_text=data['submission_text'], homework_id=data['homework_id'], student_id=request.user.id, submission_date=timezone.now() ) submission.save() return redirect(request.META.get('HTTP_REFERER')) # Teacher @login_required def journal(request): if not request.user.is_teacher: return redirect('home') students = User.objects.filter(is_teacher=False).all() subjects = Subject.objects.all() for subject in subjects: subject.homeworks = subject.homework_set.all() for student in students: student.grades = {} for subject in subjects: grades = [] for homework in subject.homeworks: try: submission = HomeworkSubmission.objects.get(student_id=student.id, homework_id=homework.id) try: grades.append({'id': submission.id, 'value': submission.homeworkgrade.grade}) except ObjectDoesNotExist: grades.append({'id': submission.id, 'value': '\u041d\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043e'}) except ObjectDoesNotExist: grades.append({'id': None, 'value': '\u041d\u0435 \u0441\u0434\u0430\u043d\u043e'}) student.grades[subject.id] = grades return render(request, 'teacher/journal.html', { 'students': students, 'subjects': subjects, }) @login_required def show_submission(request, s_id): if not request.user.is_teacher: return redirect('home') try: submission = HomeworkSubmission.objects.get(pk=s_id) except ObjectDoesNotExist: return redirect(request.META.get('HTTP_REFERER')) return render(request, 'teacher/submissions.show.html', { 'submission': submission, }) @login_required def store_grade(request): if not request.user.is_teacher: return redirect('home') data = request.POST submission = HomeworkSubmission.objects.get(pk=data['submission_id']) if submission.submission_date > submission.homework.deadline: from datetime import datetime d1 = datetime.strptime(str(submission.submission_date), \"%Y-%m-%d\") d2 = datetime.strptime(str(submission.homework.deadline), \"%Y-%m-%d\") days_overdue = (d1 - d2).days penalty = submission.homework.penalties * days_overdue else: penalty = 0 grade = round(int(data['grade']) - penalty) homework_grade = HomeworkGrade( homework_submission_id=data['submission_id'], grade=grade, graded_by=request.user, graded_date=timezone.now(), ) homework_grade.save() return redirect(request.META.get('HTTP_REFERER')) \u041e\u0431\u0437\u043e\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442. \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u041d\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0443\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u043c\u043e\u0436\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041e\u0446\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0432\u0435\u0431-\u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438, \u0441\u0434\u0430\u0447\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439","title":"l-2"},{"location":"l2/#django","text":"\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"l2/#_1","text":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\\ \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"l2/#_2","text":"class User(AbstractUser): is_teacher = models.BooleanField(default=False) class Subject(models.Model): name = models.CharField(max_length=100) def __str__(self): return self.name class Homework(models.Model): subject = models.ForeignKey(Subject, on_delete=models.CASCADE) teacher = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) issue_date = models.DateField() deadline = models.DateField() description = models.TextField() penalties = models.DecimalField(max_digits=5, decimal_places=2, default=0) def __str__(self): return f\"\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e {self.subject.name}\" class HomeworkSubmission(models.Model): student = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) homework = models.ForeignKey(Homework, on_delete=models.CASCADE) submission_text = models.TextField() submission_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u0421\u0434\u0430\u0447\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f '{self.homework}' \u043e\u0442 {self.student.username}\" class HomeworkGrade(models.Model): homework_submission = models.OneToOneField(HomeworkSubmission, on_delete=models.CASCADE) grade = models.PositiveIntegerField() graded_by = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) graded_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0441\u0434\u0430\u0447\u0443 '{self.homework_submission.homework}' \u043e\u0442 {self.homework_submission.student.username}\" \u0411\u044b\u043b\u0430 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a \u043d\u0435\u0439 \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u043b\u044c \u0443\u0447\u0435\u043d\u0438\u043a\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django-admin.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"l2/#urlspy","text":"from django.urls import path from django.contrib.auth.views import LogoutView from . import views urlpatterns = [ # Student path('', views.home, name='home'), path('homeworks/<int:subject_id>', views.index_homeworks, name='homeworks.index'), path('homeworks/show/<int:hw_id>', views.show_homeworks, name='homeworks.show'), path('submissions/', views.store_submission, name='submissions.store'), # Teacher path('journal', views.journal, name='journal'), path('submissions/<int:s_id>', views.show_submission, name='submissions.show'), path('grades', views.store_grade, name='grades.store'), # Auth path('register/', views.register, name='register'), path('login/', views.user_login, name='login'), path('logout/', views.user_logout, name='logout'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u044f.","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py"},{"location":"l2/#viewspy","text":"\u041a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041d\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432 - \u0438\u0445 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043c\u043e\u0433\u0443\u0442. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0436\u0443\u0440\u043d\u0430\u043b \u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a, \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. from homeworks.forms import RegisterForm, LoginForm from django.shortcuts import render, redirect from django.contrib.auth import login, authenticate, logout from django.contrib.auth.decorators import login_required from django.utils import timezone from django.core.exceptions import ObjectDoesNotExist from functools import wraps from django.db.models.functions import ExtractDay from homeworks.models import Subject, Homework, HomeworkSubmission, User, HomeworkGrade def anonymous_required(view_func): @wraps(view_func) def _wrapped_view(request, *args, **kwargs): if request.user.is_authenticated: return redirect('home') else: return view_func(request, *args, **kwargs) return _wrapped_view # AUTH @anonymous_required def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): new_user = form.save(commit=False) new_user.is_teacher = False new_user.save() return redirect('login') else: form = RegisterForm() return render(request, 'auth/register.html', {'form': form}) @anonymous_required def user_login(request): if request.method == 'POST': form = LoginForm(request, data=request.POST) if form.is_valid(): user = form.get_user() login(request, user) return redirect('home') else: form = LoginForm() return render(request, 'auth/login.html', {'form': form}) @login_required def user_logout(request): logout(request) return redirect('login') # System def handler404(request, exception): return render(request, 'system/404.html', status=404) # Student @login_required def home(request): subjects = Subject.objects.all() return render(request, 'home.html', { 'subjects': subjects, }) @login_required def index_homeworks(request, subject_id): subject = Subject.objects.get(pk=subject_id) homeworks = Homework.objects.filter(subject_id=subject_id).all() return render(request, 'student/homeworks.index.html', { 'subject': subject.name, 'homeworks': homeworks, }) @login_required def show_homeworks(request, hw_id): homework = Homework.objects.get(pk=hw_id) try: submission = HomeworkSubmission.objects.filter(student_id=request.user.id, homework_id=hw_id).get() except ObjectDoesNotExist: submission = None return render(request, 'student/homeworks.show.html', { 'homework': homework, 'submission': submission.submission_text if submission else None, 'is_submitted': submission is not None, }) @login_required def store_submission(request): data = request.POST submission = HomeworkSubmission( submission_text=data['submission_text'], homework_id=data['homework_id'], student_id=request.user.id, submission_date=timezone.now() ) submission.save() return redirect(request.META.get('HTTP_REFERER')) # Teacher @login_required def journal(request): if not request.user.is_teacher: return redirect('home') students = User.objects.filter(is_teacher=False).all() subjects = Subject.objects.all() for subject in subjects: subject.homeworks = subject.homework_set.all() for student in students: student.grades = {} for subject in subjects: grades = [] for homework in subject.homeworks: try: submission = HomeworkSubmission.objects.get(student_id=student.id, homework_id=homework.id) try: grades.append({'id': submission.id, 'value': submission.homeworkgrade.grade}) except ObjectDoesNotExist: grades.append({'id': submission.id, 'value': '\u041d\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043e'}) except ObjectDoesNotExist: grades.append({'id': None, 'value': '\u041d\u0435 \u0441\u0434\u0430\u043d\u043e'}) student.grades[subject.id] = grades return render(request, 'teacher/journal.html', { 'students': students, 'subjects': subjects, }) @login_required def show_submission(request, s_id): if not request.user.is_teacher: return redirect('home') try: submission = HomeworkSubmission.objects.get(pk=s_id) except ObjectDoesNotExist: return redirect(request.META.get('HTTP_REFERER')) return render(request, 'teacher/submissions.show.html', { 'submission': submission, }) @login_required def store_grade(request): if not request.user.is_teacher: return redirect('home') data = request.POST submission = HomeworkSubmission.objects.get(pk=data['submission_id']) if submission.submission_date > submission.homework.deadline: from datetime import datetime d1 = datetime.strptime(str(submission.submission_date), \"%Y-%m-%d\") d2 = datetime.strptime(str(submission.homework.deadline), \"%Y-%m-%d\") days_overdue = (d1 - d2).days penalty = submission.homework.penalties * days_overdue else: penalty = 0 grade = round(int(data['grade']) - penalty) homework_grade = HomeworkGrade( homework_submission_id=data['submission_id'], grade=grade, graded_by=request.user, graded_date=timezone.now(), ) homework_grade.save() return redirect(request.META.get('HTTP_REFERER'))","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f views.py"},{"location":"l2/#_3","text":"","title":"\u041e\u0431\u0437\u043e\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446"},{"location":"l2/#_4","text":"\u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435.","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"l2/#_5","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442.","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"l2/#_6","text":"\u041d\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b.","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"l2/#_7","text":"\u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0443\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435.","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"l2/#_8","text":"\u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"l2/#_9","text":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u043c\u043e\u0436\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041e\u0446\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:","title":"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"l2/#_10","text":"\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432"},{"location":"l2/#_11","text":"\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0432\u0435\u0431-\u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438, \u0441\u0434\u0430\u0447\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"l3/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework. \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440 \u041c\u043e\u0434\u0435\u043b\u0438 class User(models.Model): email = models.EmailField(max_length=255, blank=False, null=False, unique=True) password = models.CharField(max_length=255, blank=False, null=False) @property def favorite_playlist(self): return self.playlists.first() # profile # api_tokens # playlists class UserProfile(models.Model): first_name = models.CharField(max_length=255, blank=False, null=False) last_name = models.CharField(max_length=255, blank=False, null=False) patronymic = models.CharField(max_length=255, blank=True, null=True) user = models.OneToOneField('User', on_delete=models.CASCADE, related_name='profile') class ApiToken(models.Model): token = models.CharField(max_length=255, blank=False, null=False, unique=True) user = models.ForeignKey('User', on_delete=models.CASCADE, related_name='api_tokens') ################### class FileType(models.TextChoices): AUDIO = 'audio', 'audio' VIDEO = 'video', 'video' IMAGE = 'image', 'image' class DefaultFilePath(models.TextChoices): FAVORITE_PLAYLIST_COVER = 'storage/default_playlist_cover.jpg', 'storage/default_playlist_cover.jpg' class File(models.Model): file = models.FileField(upload_to='storage/') type = models.CharField( max_length=5, choices=FileType.choices ) @property def filename(self): return str(self.file).split('storage/')[1] # path = models.CharField(max_length=255) # extension = models.CharField(max_length=255) class Artist(models.Model): name = models.CharField(max_length=255) avatar = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') # songs # albums class Song(models.Model): artist = models.ForeignKey(Artist, on_delete=models.RESTRICT, null=True, related_name='songs') audio = models.ForeignKey(File, on_delete=models.RESTRICT, null=False, related_name='+') cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') name = models.CharField(max_length=255) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @property def audio_url(self): return settings.APP_URL + reverse('audio.download', kwargs={'filename': self.audio.filename}) class Playlist(models.Model): name = models.CharField(max_length=255) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') is_public = models.BooleanField(default=False) user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='playlists') songs = models.ManyToManyField(Song) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @staticmethod def create_favorite_playlist_for_user(user): cover = File.objects.filter(file=DefaultFilePath.FAVORITE_PLAYLIST_COVER).get() playlist = Playlist( name='Favorite', cover=cover, is_public=False, user=user ) playlist.save() class Album(models.Model): name = models.CharField(max_length=100) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') artist = models.ForeignKey(Artist, on_delete=models.RESTRICT) songs = models.ManyToManyField(Song) \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0422\u043e\u043a\u0435\u043d\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0424\u0430\u0439\u043b, \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u0430, \u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c, \u041f\u0435\u0441\u043d\u044f, \u041f\u043b\u0435\u0439\u043b\u0438\u0441\u0442, \u0410\u043b\u044c\u0431\u043e\u043c. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py from django.urls import path from musec_app.views import auth from musec_app.views import user from musec_app.views import songs from musec_app.views import files from musec_app.views import playlists urlpatterns = [ # Auth path('register', auth.register, name='auth.register'), path('login', auth.login, name='auth.login'), path('logout', auth.logout, name='auth.logout'), # User path('me', user.me, name='user.me'), # Songs path('songs', songs.index, name='songs.index'), path('songs/<int:song_id>/favorite', songs.toggle_favorite, name='songs.favorite'), path('songs/upload', songs.store, name='songs.store'), # test # Playlists path('playlists', playlists.index, name='playlists.index'), path('playlists/my', playlists.my, name='playlists.my'), # Files path('files/audio/<str:filename>', files.download_audio, name='audio.download'), path('files/image/<str:filename>', files.download_image, name='image.download'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0435\u0441\u043d\u044f\u043c\u0438, \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u0430\u043c\u0438 \u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438. serializers.py \u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django serializers \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 http-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f http-\u043e\u0442\u0432\u0435\u0442\u043e\u0432 from rest_framework import serializers from musec_app.models import File, Song class ProfileSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) first_name = serializers.CharField(max_length=255) last_name = serializers.CharField(max_length=255) patronymic = serializers.CharField(max_length=255) class UserSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) first_name = serializers.CharField(max_length=255, write_only=True) last_name = serializers.CharField(max_length=255, write_only=True) patronymic = serializers.CharField(max_length=255, write_only=True, allow_blank=True, allow_null=True) profile = ProfileSerializer(read_only=True) class UserAuthSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) class TokenSerializer(serializers.Serializer): token = serializers.CharField() class ArtistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) # avatar_url = serializers.CharField(max_length=255) class FileSerializer(serializers.ModelSerializer): class Meta: model = File fields = ['id', 'file'] class SongSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) cover_url = serializers.ReadOnlyField() audio_url = serializers.ReadOnlyField() artist = ArtistSerializer(read_only=True) name = serializers.CharField(max_length=255) artist_id = serializers.IntegerField(write_only=True) audio = serializers.FileField(write_only=True) cover = serializers.FileField(write_only=True) class PlaylistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) cover_url = serializers.ReadOnlyField() songs = SongSerializer(read_only=True, many=True) \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f songs.py from django.utils.datastructures import MultiValueDictKeyError from rest_framework.decorators import api_view, authentication_classes, parser_classes from rest_framework.parsers import MultiPartParser from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer, SongSerializer, FileSerializer from musec_app.models import Song, File, FileType @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = {} try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass songs = Song.objects.filter(**filters).all() return api_response.payload(SongSerializer(songs, many=True).data) @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) @parser_classes([MultiPartParser]) def store(request): serializer = SongSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data audio = File( file=data['audio'], type=FileType.AUDIO ) audio.save() cover = File( file=data['cover'], type=FileType.IMAGE ) cover.save() song_data = { 'name': data['name'], 'artist_id': data['artist_id'], 'audio': audio, 'cover': cover, } song = Song(**song_data) song.save() return api_response.success('Song successfully created') @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def toggle_favorite(request, song_id): song = Song.objects.filter(id=song_id).get() if not song: return api_response.not_found('Song was not found.') favorite_playlist = request.user.favorite_playlist if favorite_playlist.songs.filter(id=song_id).all().first(): # already liked favorite_playlist.songs.remove(song) else: favorite_playlist.songs.add(song) return api_response.success() playlists.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import PlaylistSerializer from musec_app.models import Playlist from django.utils.datastructures import MultiValueDictKeyError @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def my(request): playlists = Playlist.objects.filter(user_id=request.user.id, is_public=False).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = { 'user_id': None, 'is_public': True, } try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass playlists = Playlist.objects.filter(**filters).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) files.py from rest_framework.decorators import api_view from musec_app.models import File from musec_app.responses import api_response import os from django.http import HttpResponse from django.conf import settings @api_view(['GET']) def download_audio(_, filename): return get_response('audio/mpeg', filename) @api_view(['GET']) def download_image(_, filename): return get_response('image/png', filename) def get_response(content_type, filename): filename = 'storage/' + filename file = File.objects.filter(file=filename).all().first() if not file: return api_response.not_found() full_path = os.path.join(settings.MEDIA_ROOT, filename) with open(full_path, 'rb') as fh: response = HttpResponse(fh.read(), content_type=content_type) response['Content-Disposition'] = 'inline; filename=' + os.path.basename(full_path) return response user.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def me(request): return api_response.payload(UserSerializer(request.user, context={'profile': True}).data) auth.py import string import random from rest_framework.decorators import api_view, authentication_classes from musec_app.serializers import UserSerializer, UserAuthSerializer, TokenSerializer from musec_app.models import User, ApiToken, UserProfile, Playlist from musec_app.responses import api_response from musec_app.auth.authentication import AppTokenAuthentication from django.contrib.auth.hashers import PBKDF2SHA1PasswordHasher as PasswordHasher @api_view(['POST']) def register(request): serializer = UserSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data if User.objects.filter(email=data['email']).count() > 0: return api_response.error('The user with given email is already registered', 422) hasher = PasswordHasher() user = User.objects.create(email=data['email'], password=hasher.encode(data['password'], hasher.salt())) user.save() profile = UserProfile( first_name=data['first_name'], last_name=data['last_name'], patronymic=data['patronymic'], user=user ) profile.save() Playlist.create_favorite_playlist_for_user(user) return api_response.payload(UserSerializer(user).data) @api_view(['POST']) def login(request): serializer = UserAuthSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) email = serializer.validated_data['email'] password = serializer.validated_data['password'] user = User.objects.filter(email=email).first() if not user: return api_response.not_found('User not found') hasher = PasswordHasher() if not hasher.verify(password, user.password): return api_response.unauthenticated() source = string.ascii_letters + string.digits token = ''.join((random.choice(source) for _ in range(128))) api_token = ApiToken(token=token, user=user) api_token.save() response = api_response.payload(TokenSerializer({'token': token}).data) response.set_cookie( key='api_token', value=token, httponly=True ) return response @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def logout(request): request.auth.delete() return api_response.success('Successfully logged out.') api_response.py from django.http import JsonResponse def success(message='Success'): return JsonResponse( data=format_payload(message), status=200 ) def payload(data): return JsonResponse( data=format_payload(data=data), status=200 ) # Errors def unauthenticated(): return JsonResponse( data=format_payload('Invalid credentials'), status=401 ) def validation_error(errors, message='Validation error'): return JsonResponse( data=format_payload(message, None, errors), status=422 ) def not_found(message='Not found'): return JsonResponse( data=format_payload(message), status=404, ) def error(message='Error', status=400): return JsonResponse( data=format_payload(message), status=status ) # Internal def format_payload(message=None, data=None, errors=None): return { 'message': message, 'data': data if data else [], 'errors': errors if errors else [], } authentication.py from rest_framework.authentication import BaseAuthentication, get_authorization_header from django.core.exceptions import ObjectDoesNotExist from rest_framework import exceptions from musec_app.models import User, ApiToken class AppTokenAuthentication(BaseAuthentication): def authenticate(self, request): try: token = request.COOKIES['api_token'] api_token = ApiToken.objects.filter(token=token).get() except KeyError: raise exceptions.AuthenticationFailed('Unauthenticated') except ObjectDoesNotExist: raise exceptions.AuthenticationFailed('Unauthenticated') return api_token.user, api_token def authenticate_header(self, request): return 'Token' \u041e\u0431\u0437\u043e\u0440 API AUTH POST /register POST /login POST /logout User GET /me Songs GET /songs POST /songs/<id>/favorite POST /songs/upload Files/Audio GET /files/audio/<path> Files/Image GET /files/image/<path> Playlists GET /playlists/my GET /playlists?search=q \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d API \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"l-3"},{"location":"l3/#django","text":"\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 (backend) \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST framework.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"l3/#_1","text":"\u041c\u0443\u0437\u044b\u043a\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u043b\u0435\u0435\u0440","title":"\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"l3/#_2","text":"class User(models.Model): email = models.EmailField(max_length=255, blank=False, null=False, unique=True) password = models.CharField(max_length=255, blank=False, null=False) @property def favorite_playlist(self): return self.playlists.first() # profile # api_tokens # playlists class UserProfile(models.Model): first_name = models.CharField(max_length=255, blank=False, null=False) last_name = models.CharField(max_length=255, blank=False, null=False) patronymic = models.CharField(max_length=255, blank=True, null=True) user = models.OneToOneField('User', on_delete=models.CASCADE, related_name='profile') class ApiToken(models.Model): token = models.CharField(max_length=255, blank=False, null=False, unique=True) user = models.ForeignKey('User', on_delete=models.CASCADE, related_name='api_tokens') ################### class FileType(models.TextChoices): AUDIO = 'audio', 'audio' VIDEO = 'video', 'video' IMAGE = 'image', 'image' class DefaultFilePath(models.TextChoices): FAVORITE_PLAYLIST_COVER = 'storage/default_playlist_cover.jpg', 'storage/default_playlist_cover.jpg' class File(models.Model): file = models.FileField(upload_to='storage/') type = models.CharField( max_length=5, choices=FileType.choices ) @property def filename(self): return str(self.file).split('storage/')[1] # path = models.CharField(max_length=255) # extension = models.CharField(max_length=255) class Artist(models.Model): name = models.CharField(max_length=255) avatar = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') # songs # albums class Song(models.Model): artist = models.ForeignKey(Artist, on_delete=models.RESTRICT, null=True, related_name='songs') audio = models.ForeignKey(File, on_delete=models.RESTRICT, null=False, related_name='+') cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') name = models.CharField(max_length=255) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @property def audio_url(self): return settings.APP_URL + reverse('audio.download', kwargs={'filename': self.audio.filename}) class Playlist(models.Model): name = models.CharField(max_length=255) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') is_public = models.BooleanField(default=False) user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, related_name='playlists') songs = models.ManyToManyField(Song) @property def cover_url(self): return settings.APP_URL + reverse('image.download', kwargs={'filename': self.cover.filename}) @staticmethod def create_favorite_playlist_for_user(user): cover = File.objects.filter(file=DefaultFilePath.FAVORITE_PLAYLIST_COVER).get() playlist = Playlist( name='Favorite', cover=cover, is_public=False, user=user ) playlist.save() class Album(models.Model): name = models.CharField(max_length=100) cover = models.ForeignKey(File, on_delete=models.SET_NULL, null=True, related_name='+') artist = models.ForeignKey(Artist, on_delete=models.RESTRICT) songs = models.ManyToManyField(Song) \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0422\u043e\u043a\u0435\u043d\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0424\u0430\u0439\u043b, \u0422\u0438\u043f \u0444\u0430\u0439\u043b\u0430, \u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c, \u041f\u0435\u0441\u043d\u044f, \u041f\u043b\u0435\u0439\u043b\u0438\u0441\u0442, \u0410\u043b\u044c\u0431\u043e\u043c.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"l3/#urlspy","text":"from django.urls import path from musec_app.views import auth from musec_app.views import user from musec_app.views import songs from musec_app.views import files from musec_app.views import playlists urlpatterns = [ # Auth path('register', auth.register, name='auth.register'), path('login', auth.login, name='auth.login'), path('logout', auth.logout, name='auth.logout'), # User path('me', user.me, name='user.me'), # Songs path('songs', songs.index, name='songs.index'), path('songs/<int:song_id>/favorite', songs.toggle_favorite, name='songs.favorite'), path('songs/upload', songs.store, name='songs.store'), # test # Playlists path('playlists', playlists.index, name='playlists.index'), path('playlists/my', playlists.my, name='playlists.my'), # Files path('files/audio/<str:filename>', files.download_audio, name='audio.download'), path('files/image/<str:filename>', files.download_image, name='image.download'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0435\u0441\u043d\u044f\u043c\u0438, \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u0430\u043c\u0438 \u0438 \u0444\u0430\u0439\u043b\u0430\u043c\u0438.","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py"},{"location":"l3/#serializerspy","text":"\u0411\u044b\u043b \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d API \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Django serializers \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438 http-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f http-\u043e\u0442\u0432\u0435\u0442\u043e\u0432 from rest_framework import serializers from musec_app.models import File, Song class ProfileSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) first_name = serializers.CharField(max_length=255) last_name = serializers.CharField(max_length=255) patronymic = serializers.CharField(max_length=255) class UserSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) first_name = serializers.CharField(max_length=255, write_only=True) last_name = serializers.CharField(max_length=255, write_only=True) patronymic = serializers.CharField(max_length=255, write_only=True, allow_blank=True, allow_null=True) profile = ProfileSerializer(read_only=True) class UserAuthSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) email = serializers.EmailField(max_length=255) password = serializers.CharField(max_length=255, write_only=True) class TokenSerializer(serializers.Serializer): token = serializers.CharField() class ArtistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) # avatar_url = serializers.CharField(max_length=255) class FileSerializer(serializers.ModelSerializer): class Meta: model = File fields = ['id', 'file'] class SongSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) cover_url = serializers.ReadOnlyField() audio_url = serializers.ReadOnlyField() artist = ArtistSerializer(read_only=True) name = serializers.CharField(max_length=255) artist_id = serializers.IntegerField(write_only=True) audio = serializers.FileField(write_only=True) cover = serializers.FileField(write_only=True) class PlaylistSerializer(serializers.Serializer): id = serializers.IntegerField(label='id', read_only=True) name = serializers.CharField(max_length=255) cover_url = serializers.ReadOnlyField() songs = SongSerializer(read_only=True, many=True)","title":"serializers.py"},{"location":"l3/#_3","text":"songs.py from django.utils.datastructures import MultiValueDictKeyError from rest_framework.decorators import api_view, authentication_classes, parser_classes from rest_framework.parsers import MultiPartParser from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer, SongSerializer, FileSerializer from musec_app.models import Song, File, FileType @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = {} try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass songs = Song.objects.filter(**filters).all() return api_response.payload(SongSerializer(songs, many=True).data) @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) @parser_classes([MultiPartParser]) def store(request): serializer = SongSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data audio = File( file=data['audio'], type=FileType.AUDIO ) audio.save() cover = File( file=data['cover'], type=FileType.IMAGE ) cover.save() song_data = { 'name': data['name'], 'artist_id': data['artist_id'], 'audio': audio, 'cover': cover, } song = Song(**song_data) song.save() return api_response.success('Song successfully created') @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def toggle_favorite(request, song_id): song = Song.objects.filter(id=song_id).get() if not song: return api_response.not_found('Song was not found.') favorite_playlist = request.user.favorite_playlist if favorite_playlist.songs.filter(id=song_id).all().first(): # already liked favorite_playlist.songs.remove(song) else: favorite_playlist.songs.add(song) return api_response.success() playlists.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import PlaylistSerializer from musec_app.models import Playlist from django.utils.datastructures import MultiValueDictKeyError @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def my(request): playlists = Playlist.objects.filter(user_id=request.user.id, is_public=False).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def index(request): filters = { 'user_id': None, 'is_public': True, } try: filters['name__icontains'] = request.GET['search'] except MultiValueDictKeyError: pass playlists = Playlist.objects.filter(**filters).all() return api_response.payload(PlaylistSerializer(playlists, many=True).data) files.py from rest_framework.decorators import api_view from musec_app.models import File from musec_app.responses import api_response import os from django.http import HttpResponse from django.conf import settings @api_view(['GET']) def download_audio(_, filename): return get_response('audio/mpeg', filename) @api_view(['GET']) def download_image(_, filename): return get_response('image/png', filename) def get_response(content_type, filename): filename = 'storage/' + filename file = File.objects.filter(file=filename).all().first() if not file: return api_response.not_found() full_path = os.path.join(settings.MEDIA_ROOT, filename) with open(full_path, 'rb') as fh: response = HttpResponse(fh.read(), content_type=content_type) response['Content-Disposition'] = 'inline; filename=' + os.path.basename(full_path) return response user.py from rest_framework.decorators import api_view, authentication_classes from musec_app.auth.authentication import AppTokenAuthentication from musec_app.responses import api_response from musec_app.serializers import UserSerializer @api_view(['GET']) @authentication_classes([AppTokenAuthentication]) def me(request): return api_response.payload(UserSerializer(request.user, context={'profile': True}).data) auth.py import string import random from rest_framework.decorators import api_view, authentication_classes from musec_app.serializers import UserSerializer, UserAuthSerializer, TokenSerializer from musec_app.models import User, ApiToken, UserProfile, Playlist from musec_app.responses import api_response from musec_app.auth.authentication import AppTokenAuthentication from django.contrib.auth.hashers import PBKDF2SHA1PasswordHasher as PasswordHasher @api_view(['POST']) def register(request): serializer = UserSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) data = serializer.validated_data if User.objects.filter(email=data['email']).count() > 0: return api_response.error('The user with given email is already registered', 422) hasher = PasswordHasher() user = User.objects.create(email=data['email'], password=hasher.encode(data['password'], hasher.salt())) user.save() profile = UserProfile( first_name=data['first_name'], last_name=data['last_name'], patronymic=data['patronymic'], user=user ) profile.save() Playlist.create_favorite_playlist_for_user(user) return api_response.payload(UserSerializer(user).data) @api_view(['POST']) def login(request): serializer = UserAuthSerializer(data=request.data) if not serializer.is_valid(): return api_response.validation_error(serializer.errors) email = serializer.validated_data['email'] password = serializer.validated_data['password'] user = User.objects.filter(email=email).first() if not user: return api_response.not_found('User not found') hasher = PasswordHasher() if not hasher.verify(password, user.password): return api_response.unauthenticated() source = string.ascii_letters + string.digits token = ''.join((random.choice(source) for _ in range(128))) api_token = ApiToken(token=token, user=user) api_token.save() response = api_response.payload(TokenSerializer({'token': token}).data) response.set_cookie( key='api_token', value=token, httponly=True ) return response @api_view(['POST']) @authentication_classes([AppTokenAuthentication]) def logout(request): request.auth.delete() return api_response.success('Successfully logged out.') api_response.py from django.http import JsonResponse def success(message='Success'): return JsonResponse( data=format_payload(message), status=200 ) def payload(data): return JsonResponse( data=format_payload(data=data), status=200 ) # Errors def unauthenticated(): return JsonResponse( data=format_payload('Invalid credentials'), status=401 ) def validation_error(errors, message='Validation error'): return JsonResponse( data=format_payload(message, None, errors), status=422 ) def not_found(message='Not found'): return JsonResponse( data=format_payload(message), status=404, ) def error(message='Error', status=400): return JsonResponse( data=format_payload(message), status=status ) # Internal def format_payload(message=None, data=None, errors=None): return { 'message': message, 'data': data if data else [], 'errors': errors if errors else [], } authentication.py from rest_framework.authentication import BaseAuthentication, get_authorization_header from django.core.exceptions import ObjectDoesNotExist from rest_framework import exceptions from musec_app.models import User, ApiToken class AppTokenAuthentication(BaseAuthentication): def authenticate(self, request): try: token = request.COOKIES['api_token'] api_token = ApiToken.objects.filter(token=token).get() except KeyError: raise exceptions.AuthenticationFailed('Unauthenticated') except ObjectDoesNotExist: raise exceptions.AuthenticationFailed('Unauthenticated') return api_token.user, api_token def authenticate_header(self, request): return 'Token'","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f"},{"location":"l3/#api","text":"","title":"\u041e\u0431\u0437\u043e\u0440 API"},{"location":"l3/#auth","text":"POST /register POST /login POST /logout","title":"AUTH"},{"location":"l3/#user","text":"GET /me","title":"User"},{"location":"l3/#songs","text":"GET /songs POST /songs/<id>/favorite POST /songs/upload","title":"Songs"},{"location":"l3/#filesaudio","text":"GET /files/audio/<path>","title":"Files/Audio"},{"location":"l3/#filesimage","text":"GET /files/image/<path>","title":"Files/Image"},{"location":"l3/#playlists","text":"GET /playlists/my GET /playlists?search=q","title":"Playlists"},{"location":"l3/#_4","text":"\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d API \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0438 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u044f \u0430\u0443\u0434\u0438\u043e\u0434\u043e\u0440\u043e\u0436\u0435\u043a, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0440\u043e\u0436\u0435\u043a \u0432 \u043f\u043e\u043d\u0440\u0430\u0432\u0438\u0432\u0448\u0438\u0435\u0441\u044f, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u043b\u0435\u0439\u043b\u0438\u0441\u0442\u043e\u0432","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"},{"location":"pictures/l2/","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django. \u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\\ \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u041c\u043e\u0434\u0435\u043b\u0438 class User(AbstractUser): is_teacher = models.BooleanField(default=False) class Subject(models.Model): name = models.CharField(max_length=100) def __str__(self): return self.name class Homework(models.Model): subject = models.ForeignKey(Subject, on_delete=models.CASCADE) teacher = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) issue_date = models.DateField() deadline = models.DateField() description = models.TextField() penalties = models.DecimalField(max_digits=5, decimal_places=2, default=0) def __str__(self): return f\"\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e {self.subject.name}\" class HomeworkSubmission(models.Model): student = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) homework = models.ForeignKey(Homework, on_delete=models.CASCADE) submission_text = models.TextField() submission_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u0421\u0434\u0430\u0447\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f '{self.homework}' \u043e\u0442 {self.student.username}\" class HomeworkGrade(models.Model): homework_submission = models.OneToOneField(HomeworkSubmission, on_delete=models.CASCADE) grade = models.PositiveIntegerField() graded_by = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) graded_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0441\u0434\u0430\u0447\u0443 '{self.homework_submission.homework}' \u043e\u0442 {self.homework_submission.student.username}\" \u0411\u044b\u043b\u0430 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a \u043d\u0435\u0439 \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u043b\u044c \u0443\u0447\u0435\u043d\u0438\u043a\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django-admin. \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py from django.urls import path from django.contrib.auth.views import LogoutView from . import views urlpatterns = [ # Student path('', views.home, name='home'), path('homeworks/<int:subject_id>', views.index_homeworks, name='homeworks.index'), path('homeworks/show/<int:hw_id>', views.show_homeworks, name='homeworks.show'), path('submissions/', views.store_submission, name='submissions.store'), # Teacher path('journal', views.journal, name='journal'), path('submissions/<int:s_id>', views.show_submission, name='submissions.show'), path('grades', views.store_grade, name='grades.store'), # Auth path('register/', views.register, name='register'), path('login/', views.user_login, name='login'), path('logout/', views.user_logout, name='logout'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u044f. \u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f views.py \u041a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041d\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432 - \u0438\u0445 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043c\u043e\u0433\u0443\u0442. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0436\u0443\u0440\u043d\u0430\u043b \u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a, \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. from homeworks.forms import RegisterForm, LoginForm from django.shortcuts import render, redirect from django.contrib.auth import login, authenticate, logout from django.contrib.auth.decorators import login_required from django.utils import timezone from django.core.exceptions import ObjectDoesNotExist from functools import wraps from django.db.models.functions import ExtractDay from homeworks.models import Subject, Homework, HomeworkSubmission, User, HomeworkGrade def anonymous_required(view_func): @wraps(view_func) def _wrapped_view(request, *args, **kwargs): if request.user.is_authenticated: return redirect('home') else: return view_func(request, *args, **kwargs) return _wrapped_view # AUTH @anonymous_required def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): new_user = form.save(commit=False) new_user.is_teacher = False new_user.save() return redirect('login') else: form = RegisterForm() return render(request, 'auth/register.html', {'form': form}) @anonymous_required def user_login(request): if request.method == 'POST': form = LoginForm(request, data=request.POST) if form.is_valid(): user = form.get_user() login(request, user) return redirect('home') else: form = LoginForm() return render(request, 'auth/login.html', {'form': form}) @login_required def user_logout(request): logout(request) return redirect('login') # System def handler404(request, exception): return render(request, 'system/404.html', status=404) # Student @login_required def home(request): subjects = Subject.objects.all() return render(request, 'home.html', { 'subjects': subjects, }) @login_required def index_homeworks(request, subject_id): subject = Subject.objects.get(pk=subject_id) homeworks = Homework.objects.filter(subject_id=subject_id).all() return render(request, 'student/homeworks.index.html', { 'subject': subject.name, 'homeworks': homeworks, }) @login_required def show_homeworks(request, hw_id): homework = Homework.objects.get(pk=hw_id) try: submission = HomeworkSubmission.objects.filter(student_id=request.user.id, homework_id=hw_id).get() except ObjectDoesNotExist: submission = None return render(request, 'student/homeworks.show.html', { 'homework': homework, 'submission': submission.submission_text if submission else None, 'is_submitted': submission is not None, }) @login_required def store_submission(request): data = request.POST submission = HomeworkSubmission( submission_text=data['submission_text'], homework_id=data['homework_id'], student_id=request.user.id, submission_date=timezone.now() ) submission.save() return redirect(request.META.get('HTTP_REFERER')) # Teacher @login_required def journal(request): if not request.user.is_teacher: return redirect('home') students = User.objects.filter(is_teacher=False).all() subjects = Subject.objects.all() for subject in subjects: subject.homeworks = subject.homework_set.all() for student in students: student.grades = {} for subject in subjects: grades = [] for homework in subject.homeworks: try: submission = HomeworkSubmission.objects.get(student_id=student.id, homework_id=homework.id) try: grades.append({'id': submission.id, 'value': submission.homeworkgrade.grade}) except ObjectDoesNotExist: grades.append({'id': submission.id, 'value': '\u041d\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043e'}) except ObjectDoesNotExist: grades.append({'id': None, 'value': '\u041d\u0435 \u0441\u0434\u0430\u043d\u043e'}) student.grades[subject.id] = grades return render(request, 'teacher/journal.html', { 'students': students, 'subjects': subjects, }) @login_required def show_submission(request, s_id): if not request.user.is_teacher: return redirect('home') try: submission = HomeworkSubmission.objects.get(pk=s_id) except ObjectDoesNotExist: return redirect(request.META.get('HTTP_REFERER')) return render(request, 'teacher/submissions.show.html', { 'submission': submission, }) @login_required def store_grade(request): if not request.user.is_teacher: return redirect('home') data = request.POST submission = HomeworkSubmission.objects.get(pk=data['submission_id']) if submission.submission_date > submission.homework.deadline: from datetime import datetime d1 = datetime.strptime(str(submission.submission_date), \"%Y-%m-%d\") d2 = datetime.strptime(str(submission.homework.deadline), \"%Y-%m-%d\") days_overdue = (d1 - d2).days penalty = submission.homework.penalties * days_overdue else: penalty = 0 grade = round(int(data['grade']) - penalty) homework_grade = HomeworkGrade( homework_submission_id=data['submission_id'], grade=grade, graded_by=request.user, graded_date=timezone.now(), ) homework_grade.save() return redirect(request.META.get('HTTP_REFERER')) \u041e\u0431\u0437\u043e\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442. \u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u041d\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0443\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u043c\u043e\u0436\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041e\u0446\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435: \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430. \u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0432\u0435\u0431-\u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438, \u0441\u0434\u0430\u0447\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"pictures/l2/#django","text":"\u0426\u0435\u043b\u044c: \u043e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0441\u0430\u0439\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django"},{"location":"pictures/l2/#_1","text":"\u0414\u043e\u0441\u043a\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439.\\ \u041e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f: \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u0430\u0442\u0430 \u0432\u044b\u0434\u0430\u0447\u0438, \u043f\u0435\u0440\u0438\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0448\u0442\u0440\u0430\u0444\u0430\u0445. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c (\u0441\u0440\u043e\u043a\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f). \u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0437\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u0422\u0435\u043a\u0441\u0442 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"pictures/l2/#_2","text":"class User(AbstractUser): is_teacher = models.BooleanField(default=False) class Subject(models.Model): name = models.CharField(max_length=100) def __str__(self): return self.name class Homework(models.Model): subject = models.ForeignKey(Subject, on_delete=models.CASCADE) teacher = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) issue_date = models.DateField() deadline = models.DateField() description = models.TextField() penalties = models.DecimalField(max_digits=5, decimal_places=2, default=0) def __str__(self): return f\"\u0414\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e {self.subject.name}\" class HomeworkSubmission(models.Model): student = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) homework = models.ForeignKey(Homework, on_delete=models.CASCADE) submission_text = models.TextField() submission_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u0421\u0434\u0430\u0447\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u044f '{self.homework}' \u043e\u0442 {self.student.username}\" class HomeworkGrade(models.Model): homework_submission = models.OneToOneField(HomeworkSubmission, on_delete=models.CASCADE) grade = models.PositiveIntegerField() graded_by = models.ForeignKey(get_user_model(), on_delete=models.CASCADE) graded_date = models.DateField(auto_now_add=True) def __str__(self): return f\"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430 \u0441\u0434\u0430\u0447\u0443 '{self.homework_submission.homework}' \u043e\u0442 {self.homework_submission.student.username}\" \u0411\u044b\u043b\u0430 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041a \u043d\u0435\u0439 \u0431\u044b\u043b \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d \u0444\u043b\u0430\u0433 \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u043e\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u043e\u043b\u044c \u0443\u0447\u0435\u043d\u0438\u043a\u0430. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django-admin.","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"pictures/l2/#urlspy","text":"from django.urls import path from django.contrib.auth.views import LogoutView from . import views urlpatterns = [ # Student path('', views.home, name='home'), path('homeworks/<int:subject_id>', views.index_homeworks, name='homeworks.index'), path('homeworks/show/<int:hw_id>', views.show_homeworks, name='homeworks.show'), path('submissions/', views.store_submission, name='submissions.store'), # Teacher path('journal', views.journal, name='journal'), path('submissions/<int:s_id>', views.show_submission, name='submissions.show'), path('grades', views.store_grade, name='grades.store'), # Auth path('register/', views.register, name='register'), path('login/', views.user_login, name='login'), path('logout/', views.user_logout, name='logout'), ] \u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043f\u043e \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u0433\u0440\u0443\u043f\u043f\u0430\u043c: \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u0434\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u044f.","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f urls.py"},{"location":"pictures/l2/#viewspy","text":"\u041a \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u043c \u0431\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041d\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043b\u043e\u0433\u0438\u043d\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u043e\u0442\u0438\u0432 - \u0438\u0445 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u043c\u043e\u0433\u0443\u0442. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f\u043c\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0436\u0443\u0440\u043d\u0430\u043b \u0438 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a, \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. from homeworks.forms import RegisterForm, LoginForm from django.shortcuts import render, redirect from django.contrib.auth import login, authenticate, logout from django.contrib.auth.decorators import login_required from django.utils import timezone from django.core.exceptions import ObjectDoesNotExist from functools import wraps from django.db.models.functions import ExtractDay from homeworks.models import Subject, Homework, HomeworkSubmission, User, HomeworkGrade def anonymous_required(view_func): @wraps(view_func) def _wrapped_view(request, *args, **kwargs): if request.user.is_authenticated: return redirect('home') else: return view_func(request, *args, **kwargs) return _wrapped_view # AUTH @anonymous_required def register(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): new_user = form.save(commit=False) new_user.is_teacher = False new_user.save() return redirect('login') else: form = RegisterForm() return render(request, 'auth/register.html', {'form': form}) @anonymous_required def user_login(request): if request.method == 'POST': form = LoginForm(request, data=request.POST) if form.is_valid(): user = form.get_user() login(request, user) return redirect('home') else: form = LoginForm() return render(request, 'auth/login.html', {'form': form}) @login_required def user_logout(request): logout(request) return redirect('login') # System def handler404(request, exception): return render(request, 'system/404.html', status=404) # Student @login_required def home(request): subjects = Subject.objects.all() return render(request, 'home.html', { 'subjects': subjects, }) @login_required def index_homeworks(request, subject_id): subject = Subject.objects.get(pk=subject_id) homeworks = Homework.objects.filter(subject_id=subject_id).all() return render(request, 'student/homeworks.index.html', { 'subject': subject.name, 'homeworks': homeworks, }) @login_required def show_homeworks(request, hw_id): homework = Homework.objects.get(pk=hw_id) try: submission = HomeworkSubmission.objects.filter(student_id=request.user.id, homework_id=hw_id).get() except ObjectDoesNotExist: submission = None return render(request, 'student/homeworks.show.html', { 'homework': homework, 'submission': submission.submission_text if submission else None, 'is_submitted': submission is not None, }) @login_required def store_submission(request): data = request.POST submission = HomeworkSubmission( submission_text=data['submission_text'], homework_id=data['homework_id'], student_id=request.user.id, submission_date=timezone.now() ) submission.save() return redirect(request.META.get('HTTP_REFERER')) # Teacher @login_required def journal(request): if not request.user.is_teacher: return redirect('home') students = User.objects.filter(is_teacher=False).all() subjects = Subject.objects.all() for subject in subjects: subject.homeworks = subject.homework_set.all() for student in students: student.grades = {} for subject in subjects: grades = [] for homework in subject.homeworks: try: submission = HomeworkSubmission.objects.get(student_id=student.id, homework_id=homework.id) try: grades.append({'id': submission.id, 'value': submission.homeworkgrade.grade}) except ObjectDoesNotExist: grades.append({'id': submission.id, 'value': '\u041d\u0435 \u043e\u0446\u0435\u043d\u0435\u043d\u043e'}) except ObjectDoesNotExist: grades.append({'id': None, 'value': '\u041d\u0435 \u0441\u0434\u0430\u043d\u043e'}) student.grades[subject.id] = grades return render(request, 'teacher/journal.html', { 'students': students, 'subjects': subjects, }) @login_required def show_submission(request, s_id): if not request.user.is_teacher: return redirect('home') try: submission = HomeworkSubmission.objects.get(pk=s_id) except ObjectDoesNotExist: return redirect(request.META.get('HTTP_REFERER')) return render(request, 'teacher/submissions.show.html', { 'submission': submission, }) @login_required def store_grade(request): if not request.user.is_teacher: return redirect('home') data = request.POST submission = HomeworkSubmission.objects.get(pk=data['submission_id']) if submission.submission_date > submission.homework.deadline: from datetime import datetime d1 = datetime.strptime(str(submission.submission_date), \"%Y-%m-%d\") d2 = datetime.strptime(str(submission.homework.deadline), \"%Y-%m-%d\") days_overdue = (d1 - d2).days penalty = submission.homework.penalties * days_overdue else: penalty = 0 grade = round(int(data['grade']) - penalty) homework_grade = HomeworkGrade( homework_submission_id=data['submission_id'], grade=grade, graded_by=request.user, graded_date=timezone.now(), ) homework_grade.save() return redirect(request.META.get('HTTP_REFERER'))","title":"\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440\u044b \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f views.py"},{"location":"pictures/l2/#_3","text":"","title":"\u041e\u0431\u0437\u043e\u0440 \u0441\u0442\u0440\u0430\u043d\u0438\u0446"},{"location":"pictures/l2/#_4","text":"\u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435.","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"pictures/l2/#_5","text":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430 \u043d\u0430 \u0441\u0430\u0439\u0442.","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"pictures/l2/#_6","text":"\u041d\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0432\u044b\u0432\u0435\u0434\u0435\u043d\u044b \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u044b.","title":"\u0414\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"pictures/l2/#_7","text":"\u041d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0443\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439 \u043f\u043e \u0432\u0441\u0435\u043c \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0441\u0440\u043e\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435.","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"pictures/l2/#_8","text":"\u0423\u0447\u0435\u043d\u0438\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0441\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f, \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.","title":"\u0421\u0434\u0430\u0447\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"pictures/l2/#_9","text":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 (\u0443\u0447\u0438\u0442\u0435\u043b\u044c) \u043c\u043e\u0436\u0435\u0442 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f. \u041e\u0446\u0435\u043d\u0435\u043d\u043d\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435:","title":"\u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u0430\u0434\u0430\u043d\u0438\u0439"},{"location":"pictures/l2/#_10","text":"\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430.","title":"\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043e\u043a \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432"},{"location":"pictures/l2/#_11","text":"\u0412 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0432\u0435\u0431-\u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438, \u0441\u0434\u0430\u0447\u0438 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0437\u0430\u0434\u0430\u043d\u0438\u0439","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435"}]}